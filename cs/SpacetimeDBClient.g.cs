// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit dev).

#nullable enable

using System;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB.Types
{
    public sealed partial class RemoteReducers : RemoteBase
    {
        internal RemoteReducers(DbConnection conn, SetReducerFlags flags) : base(conn) => SetCallReducerFlags = flags;
        internal readonly SetReducerFlags SetCallReducerFlags;
        internal event Action<ReducerEventContext, Exception>? InternalOnUnhandledReducerError;
    }

    public sealed partial class RemoteTables : RemoteTablesBase
    {
        public RemoteTables(DbConnection conn)
        {
            AddTable(AIDebugState = new(conn));
            AddTable(AchievementDesc = new(conn));
            AddTable(ActionState = new(conn));
            AddTable(ActiveBuffState = new(conn));
            AddTable(AdminBroadcast = new(conn));
            AddTable(AlertDesc = new(conn));
            AddTable(AlertState = new(conn));
            AddTable(AttachedHerdsState = new(conn));
            AddTable(AttackOutcomeState = new(conn));
            AddTable(AutoClaimState = new(conn));
            AddTable(BarterStallState = new(conn));
            AddTable(BiomeDesc = new(conn));
            AddTable(BuffDesc = new(conn));
            AddTable(BuffTypeDesc = new(conn));
            AddTable(BuildingClaimDesc = new(conn));
            AddTable(BuildingDesc = new(conn));
            AddTable(BuildingFunctionTypeMappingDesc = new(conn));
            AddTable(BuildingNicknameState = new(conn));
            AddTable(BuildingPortalDesc = new(conn));
            AddTable(BuildingRepairsDesc = new(conn));
            AddTable(BuildingSpawnDesc = new(conn));
            AddTable(BuildingState = new(conn));
            AddTable(BuildingTypeDesc = new(conn));
            AddTable(BuyOrderState = new(conn));
            AddTable(CargoDesc = new(conn));
            AddTable(CharacterStatDesc = new(conn));
            AddTable(CharacterStatsState = new(conn));
            AddTable(ChatMessageState = new(conn));
            AddTable(ChestRarityDesc = new(conn));
            AddTable(ClaimLocalState = new(conn));
            AddTable(ClaimMemberState = new(conn));
            AddTable(ClaimRecruitmentState = new(conn));
            AddTable(ClaimState = new(conn));
            AddTable(ClaimTechDesc = new(conn));
            AddTable(ClaimTechState = new(conn));
            AddTable(ClaimTileCost = new(conn));
            AddTable(ClaimTileState = new(conn));
            AddTable(ClimbRequirementDesc = new(conn));
            AddTable(ClosedListingState = new(conn));
            AddTable(ClothingDesc = new(conn));
            AddTable(CollectibleDesc = new(conn));
            AddTable(CombatActionDesc = new(conn));
            AddTable(CombatState = new(conn));
            AddTable(Config = new(conn));
            AddTable(ConstructionRecipeDesc = new(conn));
            AddTable(CraftingRecipeDesc = new(conn));
            AddTable(DeconstructionRecipeDesc = new(conn));
            AddTable(DeployableCollectibleState = new(conn));
            AddTable(DeployableDesc = new(conn));
            AddTable(DeployableState = new(conn));
            AddTable(DimensionDescriptionState = new(conn));
            AddTable(DimensionNetworkState = new(conn));
            AddTable(DistantVisibleEntity = new(conn));
            AddTable(DistantVisibleEntityDesc = new(conn));
            AddTable(DroppedInventoryState = new(conn));
            AddTable(DuelState = new(conn));
            AddTable(ElevatorDesc = new(conn));
            AddTable(EmoteDesc = new(conn));
            AddTable(EmpireChunkState = new(conn));
            AddTable(EmpireColorDesc = new(conn));
            AddTable(EmpireCraftSuppliesTimer = new(conn));
            AddTable(EmpireDecayLoopTimer = new(conn));
            AddTable(EmpireDirectiveState = new(conn));
            AddTable(EmpireEmblemState = new(conn));
            AddTable(EmpireExpansionState = new(conn));
            AddTable(EmpireFoundryState = new(conn));
            AddTable(EmpireIconDesc = new(conn));
            AddTable(EmpireLogState = new(conn));
            AddTable(EmpireNodeSiegeState = new(conn));
            AddTable(EmpireNodeState = new(conn));
            AddTable(EmpireNotificationDesc = new(conn));
            AddTable(EmpireNotificationState = new(conn));
            AddTable(EmpirePlayerDataState = new(conn));
            AddTable(EmpirePlayerLogState = new(conn));
            AddTable(EmpireRankDesc = new(conn));
            AddTable(EmpireRankState = new(conn));
            AddTable(EmpireSettlementState = new(conn));
            AddTable(EmpireSiegeEngineState = new(conn));
            AddTable(EmpireSiegeLoopTimer = new(conn));
            AddTable(EmpireState = new(conn));
            AddTable(EmpireSuppliesDesc = new(conn));
            AddTable(EmpireTerritoryDesc = new(conn));
            AddTable(EnemyAiParamsDesc = new(conn));
            AddTable(EnemyDesc = new(conn));
            AddTable(EnemyMobMonitorState = new(conn));
            AddTable(EnemyState = new(conn));
            AddTable(EnvironmentDebuffDesc = new(conn));
            AddTable(EquipmentDesc = new(conn));
            AddTable(EquipmentState = new(conn));
            AddTable(ExperienceState = new(conn));
            AddTable(ExplorationChunksState = new(conn));
            AddTable(ExtractOutcomeState = new(conn));
            AddTable(ExtractionRecipeDesc = new(conn));
            AddTable(FoodDesc = new(conn));
            AddTable(FootprintTileState = new(conn));
            AddTable(ForceGenerateTypes = new(conn));
            AddTable(GateDesc = new(conn));
            AddTable(GlobalSearchState = new(conn));
            AddTable(Globals = new(conn));
            AddTable(GrantedHubItemState = new(conn));
            AddTable(GrowthState = new(conn));
            AddTable(HealthState = new(conn));
            AddTable(HerdState = new(conn));
            AddTable(HexiteExchangeEntryDesc = new(conn));
            AddTable(IdentityRole = new(conn));
            AddTable(InterModuleMessage = new(conn));
            AddTable(InterModuleMessageCounter = new(conn));
            AddTable(InterModuleResponseMessageCounter = new(conn));
            AddTable(InteriorCollapseTriggerState = new(conn));
            AddTable(InteriorEnvironmentDesc = new(conn));
            AddTable(InteriorInstanceDesc = new(conn));
            AddTable(InteriorNetworkDesc = new(conn));
            AddTable(InteriorPortalConnectionsDesc = new(conn));
            AddTable(InteriorShapeDesc = new(conn));
            AddTable(InteriorSpawnDesc = new(conn));
            AddTable(InventoryState = new(conn));
            AddTable(ItemConversionRecipeDesc = new(conn));
            AddTable(ItemDesc = new(conn));
            AddTable(ItemListDesc = new(conn));
            AddTable(KnowledgeAchievementState = new(conn));
            AddTable(KnowledgeBattleActionState = new(conn));
            AddTable(KnowledgeBuildingState = new(conn));
            AddTable(KnowledgeCargoState = new(conn));
            AddTable(KnowledgeClaimState = new(conn));
            AddTable(KnowledgeConstructionState = new(conn));
            AddTable(KnowledgeCraftState = new(conn));
            AddTable(KnowledgeDeployableState = new(conn));
            AddTable(KnowledgeEnemyState = new(conn));
            AddTable(KnowledgeExtractState = new(conn));
            AddTable(KnowledgeItemState = new(conn));
            AddTable(KnowledgeLoreState = new(conn));
            AddTable(KnowledgeNpcState = new(conn));
            AddTable(KnowledgePavingState = new(conn));
            AddTable(KnowledgePillarShapingState = new(conn));
            AddTable(KnowledgeResourcePlacementState = new(conn));
            AddTable(KnowledgeResourceState = new(conn));
            AddTable(KnowledgeRuinsState = new(conn));
            AddTable(KnowledgeScrollDesc = new(conn));
            AddTable(KnowledgeScrollTypeDesc = new(conn));
            AddTable(KnowledgeSecondaryState = new(conn));
            AddTable(KnowledgeStatModifierDesc = new(conn));
            AddTable(KnowledgeVaultState = new(conn));
            AddTable(LightSourceState = new(conn));
            AddTable(LocationState = new(conn));
            AddTable(LootChestDesc = new(conn));
            AddTable(LootChestState = new(conn));
            AddTable(LootRarityDesc = new(conn));
            AddTable(LootTableDesc = new(conn));
            AddTable(LostItemsState = new(conn));
            AddTable(MobileEntityState = new(conn));
            AddTable(MountingState = new(conn));
            AddTable(MoveValidationStrikeCounterState = new(conn));
            AddTable(NpcDesc = new(conn));
            AddTable(NpcState = new(conn));
            AddTable(OnboardingRewardDesc = new(conn));
            AddTable(OnboardingState = new(conn));
            AddTable(ParametersDesc = new(conn));
            AddTable(ParametersPlayerMoveDesc = new(conn));
            AddTable(PassiveCraftState = new(conn));
            AddTable(PathfindingDesc = new(conn));
            AddTable(PavedTileState = new(conn));
            AddTable(PavingTileDesc = new(conn));
            AddTable(PermissionState = new(conn));
            AddTable(PillarShapingDesc = new(conn));
            AddTable(PillarShapingState = new(conn));
            AddTable(PlayerActionDesc = new(conn));
            AddTable(PlayerActionState = new(conn));
            AddTable(PlayerHousingDesc = new(conn));
            AddTable(PlayerHousingState = new(conn));
            AddTable(PlayerLowercaseUsernameState = new(conn));
            AddTable(PlayerNoteState = new(conn));
            AddTable(PlayerNotificationEvent = new(conn));
            AddTable(PlayerPrefsState = new(conn));
            AddTable(PlayerQueueState = new(conn));
            AddTable(PlayerReportState = new(conn));
            AddTable(PlayerShardState = new(conn));
            AddTable(PlayerState = new(conn));
            AddTable(PlayerTimestampState = new(conn));
            AddTable(PlayerUsernameState = new(conn));
            AddTable(PlayerVoteConcludeTimer = new(conn));
            AddTable(PlayerVoteState = new(conn));
            AddTable(PortalState = new(conn));
            AddTable(PrivateParametersDesc = new(conn));
            AddTable(ProgressiveActionState = new(conn));
            AddTable(ProjectSiteState = new(conn));
            AddTable(RegionConnectionInfo = new(conn));
            AddTable(RegionPopulationInfo = new(conn));
            AddTable(RegionSignInParameters = new(conn));
            AddTable(RentState = new(conn));
            AddTable(ResourceClumpDesc = new(conn));
            AddTable(ResourceCount = new(conn));
            AddTable(ResourceDesc = new(conn));
            AddTable(ResourceGrowthRecipeDesc = new(conn));
            AddTable(ResourceHealthState = new(conn));
            AddTable(ResourcePlacementRecipeDesc = new(conn));
            AddTable(ResourceState = new(conn));
            AddTable(RezSickLongTermState = new(conn));
            AddTable(SatiationState = new(conn));
            AddTable(SecondaryKnowledgeDesc = new(conn));
            AddTable(SellOrderState = new(conn));
            AddTable(ServerIdentity = new(conn));
            AddTable(SignedInPlayerState = new(conn));
            AddTable(SingleResourceToClumpDesc = new(conn));
            AddTable(SkillDesc = new(conn));
            AddTable(StagedStaticData = new(conn));
            AddTable(StaminaState = new(conn));
            AddTable(StarvingPlayerState = new(conn));
            AddTable(TargetState = new(conn));
            AddTable(TargetableState = new(conn));
            AddTable(TargetingMatrixDesc = new(conn));
            AddTable(TeleportItemDesc = new(conn));
            AddTable(TeleportationEnergyState = new(conn));
            AddTable(TerraformProgressState = new(conn));
            AddTable(TerraformRecipeDesc = new(conn));
            AddTable(TerrainChunkState = new(conn));
            AddTable(TheGreatPlaceholderTable = new(conn));
            AddTable(ThreatState = new(conn));
            AddTable(ToolDesc = new(conn));
            AddTable(ToolTypeDesc = new(conn));
            AddTable(ToolbarState = new(conn));
            AddTable(TradeOrderState = new(conn));
            AddTable(TradeSessionState = new(conn));
            AddTable(TravelerTaskDesc = new(conn));
            AddTable(TravelerTaskState = new(conn));
            AddTable(TravelerTradeOrderDesc = new(conn));
            AddTable(UnclaimedCollectiblesState = new(conn));
            AddTable(UnclaimedShardsState = new(conn));
            AddTable(UserAuthenticationState = new(conn));
            AddTable(UserModerationState = new(conn));
            AddTable(UserPreviousRegionState = new(conn));
            AddTable(UserRegionState = new(conn));
            AddTable(UserState = new(conn));
            AddTable(VaultState = new(conn));
            AddTable(WallDesc = new(conn));
            AddTable(WeaponDesc = new(conn));
            AddTable(WeaponTypeDesc = new(conn));
            AddTable(WorldRegionNameState = new(conn));
            AddTable(WorldRegionState = new(conn));
        }
    }

    public sealed partial class SetReducerFlags { }

        public interface IRemoteDbContext : IDbContext<RemoteTables, RemoteReducers, SetReducerFlags, SubscriptionBuilder> {
            public event Action<ReducerEventContext, Exception>? OnUnhandledReducerError;
        }

        public sealed class EventContext : IEventContext, IRemoteDbContext
        {
            private readonly DbConnection conn;

            /// <summary>
            /// The event that caused this callback to run.
            /// </summary>
            public readonly Event<Reducer> Event;

            /// <summary>
            /// Access to tables in the client cache, which stores a read-only replica of the remote database state.
            ///
            /// The returned <c>DbView</c> will have a method to access each table defined by the module.
            /// </summary>
            public RemoteTables Db => conn.Db;
            /// <summary>
            /// Access to reducers defined by the module.
            ///
            /// The returned <c>RemoteReducers</c> will have a method to invoke each reducer defined by the module,
            /// plus methods for adding and removing callbacks on each of those reducers.
            /// </summary>
            public RemoteReducers Reducers => conn.Reducers;
            /// <summary>
            /// Access to setters for per-reducer flags.
            ///
            /// The returned <c>SetReducerFlags</c> will have a method to invoke,
            /// for each reducer defined by the module,
            /// which call-flags for the reducer can be set.
            /// </summary>
            public SetReducerFlags SetReducerFlags => conn.SetReducerFlags;
            /// <summary>
            /// Returns <c>true</c> if the connection is active, i.e. has not yet disconnected.
            /// </summary>
            public bool IsActive => conn.IsActive;
            /// <summary>
            /// Close the connection.
            ///
            /// Throws an error if the connection is already closed.
            /// </summary>
            public void Disconnect() {
                conn.Disconnect();
            }
            /// <summary>
            /// Start building a subscription.
            /// </summary>
            /// <returns>A builder-pattern constructor for subscribing to queries,
            /// causing matching rows to be replicated into the client cache.</returns>
            public SubscriptionBuilder SubscriptionBuilder() => conn.SubscriptionBuilder();
            /// <summary>
            /// Get the <c>Identity</c> of this connection.
            ///
            /// This method returns null if the connection was constructed anonymously
            /// and we have not yet received our newly-generated <c>Identity</c> from the host.
            /// </summary>
            public Identity? Identity => conn.Identity;
            /// <summary>
            /// Get this connection's <c>ConnectionId</c>.
            /// </summary>
            public ConnectionId ConnectionId => conn.ConnectionId;
            /// <summary>
            /// Register a callback to be called when a reducer with no handler returns an error.
            /// </summary>
            public event Action<ReducerEventContext, Exception>? OnUnhandledReducerError {
                add => Reducers.InternalOnUnhandledReducerError += value;
                remove => Reducers.InternalOnUnhandledReducerError -= value;
            }

            internal EventContext(DbConnection conn, Event<Reducer> Event)
            {
                this.conn = conn;
                this.Event = Event;
            }
        }

        public sealed class ReducerEventContext : IReducerEventContext, IRemoteDbContext
        {
            private readonly DbConnection conn;
            /// <summary>
            /// The reducer event that caused this callback to run.
            /// </summary>
            public readonly ReducerEvent<Reducer> Event;

            /// <summary>
            /// Access to tables in the client cache, which stores a read-only replica of the remote database state.
            ///
            /// The returned <c>DbView</c> will have a method to access each table defined by the module.
            /// </summary>
            public RemoteTables Db => conn.Db;
            /// <summary>
            /// Access to reducers defined by the module.
            ///
            /// The returned <c>RemoteReducers</c> will have a method to invoke each reducer defined by the module,
            /// plus methods for adding and removing callbacks on each of those reducers.
            /// </summary>
            public RemoteReducers Reducers => conn.Reducers;
            /// <summary>
            /// Access to setters for per-reducer flags.
            ///
            /// The returned <c>SetReducerFlags</c> will have a method to invoke,
            /// for each reducer defined by the module,
            /// which call-flags for the reducer can be set.
            /// </summary>
            public SetReducerFlags SetReducerFlags => conn.SetReducerFlags;
            /// <summary>
            /// Returns <c>true</c> if the connection is active, i.e. has not yet disconnected.
            /// </summary>
            public bool IsActive => conn.IsActive;
            /// <summary>
            /// Close the connection.
            ///
            /// Throws an error if the connection is already closed.
            /// </summary>
            public void Disconnect() {
                conn.Disconnect();
            }
            /// <summary>
            /// Start building a subscription.
            /// </summary>
            /// <returns>A builder-pattern constructor for subscribing to queries,
            /// causing matching rows to be replicated into the client cache.</returns>
            public SubscriptionBuilder SubscriptionBuilder() => conn.SubscriptionBuilder();
            /// <summary>
            /// Get the <c>Identity</c> of this connection.
            ///
            /// This method returns null if the connection was constructed anonymously
            /// and we have not yet received our newly-generated <c>Identity</c> from the host.
            /// </summary>
            public Identity? Identity => conn.Identity;
            /// <summary>
            /// Get this connection's <c>ConnectionId</c>.
            /// </summary>
            public ConnectionId ConnectionId => conn.ConnectionId;
            /// <summary>
            /// Register a callback to be called when a reducer with no handler returns an error.
            /// </summary>
            public event Action<ReducerEventContext, Exception>? OnUnhandledReducerError {
                add => Reducers.InternalOnUnhandledReducerError += value;
                remove => Reducers.InternalOnUnhandledReducerError -= value;
            }

            internal ReducerEventContext(DbConnection conn, ReducerEvent<Reducer> reducerEvent)
            {
                this.conn = conn;
                Event = reducerEvent;
            }
        }

        public sealed class ErrorContext : IErrorContext, IRemoteDbContext
        {
            private readonly DbConnection conn;
            /// <summary>
            /// The <c>Exception</c> that caused this error callback to be run.
            /// </summary>
            public readonly Exception Event;
            Exception IErrorContext.Event {
                get {
                    return Event;
                }
            }
            
            /// <summary>
            /// Access to tables in the client cache, which stores a read-only replica of the remote database state.
            ///
            /// The returned <c>DbView</c> will have a method to access each table defined by the module.
            /// </summary>
            public RemoteTables Db => conn.Db;
            /// <summary>
            /// Access to reducers defined by the module.
            ///
            /// The returned <c>RemoteReducers</c> will have a method to invoke each reducer defined by the module,
            /// plus methods for adding and removing callbacks on each of those reducers.
            /// </summary>
            public RemoteReducers Reducers => conn.Reducers;
            /// <summary>
            /// Access to setters for per-reducer flags.
            ///
            /// The returned <c>SetReducerFlags</c> will have a method to invoke,
            /// for each reducer defined by the module,
            /// which call-flags for the reducer can be set.
            /// </summary>
            public SetReducerFlags SetReducerFlags => conn.SetReducerFlags;
            /// <summary>
            /// Returns <c>true</c> if the connection is active, i.e. has not yet disconnected.
            /// </summary>
            public bool IsActive => conn.IsActive;
            /// <summary>
            /// Close the connection.
            ///
            /// Throws an error if the connection is already closed.
            /// </summary>
            public void Disconnect() {
                conn.Disconnect();
            }
            /// <summary>
            /// Start building a subscription.
            /// </summary>
            /// <returns>A builder-pattern constructor for subscribing to queries,
            /// causing matching rows to be replicated into the client cache.</returns>
            public SubscriptionBuilder SubscriptionBuilder() => conn.SubscriptionBuilder();
            /// <summary>
            /// Get the <c>Identity</c> of this connection.
            ///
            /// This method returns null if the connection was constructed anonymously
            /// and we have not yet received our newly-generated <c>Identity</c> from the host.
            /// </summary>
            public Identity? Identity => conn.Identity;
            /// <summary>
            /// Get this connection's <c>ConnectionId</c>.
            /// </summary>
            public ConnectionId ConnectionId => conn.ConnectionId;
            /// <summary>
            /// Register a callback to be called when a reducer with no handler returns an error.
            /// </summary>
            public event Action<ReducerEventContext, Exception>? OnUnhandledReducerError {
                add => Reducers.InternalOnUnhandledReducerError += value;
                remove => Reducers.InternalOnUnhandledReducerError -= value;
            }

            internal ErrorContext(DbConnection conn, Exception error)
            {
                this.conn = conn;
                Event = error;
            }
        }

        public sealed class SubscriptionEventContext : ISubscriptionEventContext, IRemoteDbContext
        {
            private readonly DbConnection conn;

            /// <summary>
            /// Access to tables in the client cache, which stores a read-only replica of the remote database state.
            ///
            /// The returned <c>DbView</c> will have a method to access each table defined by the module.
            /// </summary>
            public RemoteTables Db => conn.Db;
            /// <summary>
            /// Access to reducers defined by the module.
            ///
            /// The returned <c>RemoteReducers</c> will have a method to invoke each reducer defined by the module,
            /// plus methods for adding and removing callbacks on each of those reducers.
            /// </summary>
            public RemoteReducers Reducers => conn.Reducers;
            /// <summary>
            /// Access to setters for per-reducer flags.
            ///
            /// The returned <c>SetReducerFlags</c> will have a method to invoke,
            /// for each reducer defined by the module,
            /// which call-flags for the reducer can be set.
            /// </summary>
            public SetReducerFlags SetReducerFlags => conn.SetReducerFlags;
            /// <summary>
            /// Returns <c>true</c> if the connection is active, i.e. has not yet disconnected.
            /// </summary>
            public bool IsActive => conn.IsActive;
            /// <summary>
            /// Close the connection.
            ///
            /// Throws an error if the connection is already closed.
            /// </summary>
            public void Disconnect() {
                conn.Disconnect();
            }
            /// <summary>
            /// Start building a subscription.
            /// </summary>
            /// <returns>A builder-pattern constructor for subscribing to queries,
            /// causing matching rows to be replicated into the client cache.</returns>
            public SubscriptionBuilder SubscriptionBuilder() => conn.SubscriptionBuilder();
            /// <summary>
            /// Get the <c>Identity</c> of this connection.
            ///
            /// This method returns null if the connection was constructed anonymously
            /// and we have not yet received our newly-generated <c>Identity</c> from the host.
            /// </summary>
            public Identity? Identity => conn.Identity;
            /// <summary>
            /// Get this connection's <c>ConnectionId</c>.
            /// </summary>
            public ConnectionId ConnectionId => conn.ConnectionId;
            /// <summary>
            /// Register a callback to be called when a reducer with no handler returns an error.
            /// </summary>
            public event Action<ReducerEventContext, Exception>? OnUnhandledReducerError {
                add => Reducers.InternalOnUnhandledReducerError += value;
                remove => Reducers.InternalOnUnhandledReducerError -= value;
            }

            internal SubscriptionEventContext(DbConnection conn)
            {
                this.conn = conn;
            }
        }

        /// <summary>
        /// Builder-pattern constructor for subscription queries.
        /// </summary>
        public sealed class SubscriptionBuilder
        {
            private readonly IDbConnection conn;

            private event Action<SubscriptionEventContext>? Applied;
            private event Action<ErrorContext, Exception>? Error;

            /// <summary>
            /// Private API, use <c>conn.SubscriptionBuilder()</c> instead.
            /// </summary>
            public SubscriptionBuilder(IDbConnection conn)
            {
                this.conn = conn;
            }

            /// <summary>
            /// Register a callback to run when the subscription is applied.
            /// </summary>
            public SubscriptionBuilder OnApplied(
                Action<SubscriptionEventContext> callback
            )
            {
                Applied += callback;
                return this;
            }

            /// <summary>
            /// Register a callback to run when the subscription fails.
            ///
            /// Note that this callback may run either when attempting to apply the subscription,
            /// in which case <c>Self::on_applied</c> will never run,
            /// or later during the subscription's lifetime if the module's interface changes,
            /// in which case <c>Self::on_applied</c> may have already run.
            /// </summary>
            public SubscriptionBuilder OnError(
                Action<ErrorContext, Exception> callback
            )
            {
                Error += callback;
                return this;
            }

            /// <summary>
            /// Subscribe to the following SQL queries.
            /// 
            /// This method returns immediately, with the data not yet added to the DbConnection.
            /// The provided callbacks will be invoked once the data is returned from the remote server.
            /// Data from all the provided queries will be returned at the same time.
            /// 
            /// See the SpacetimeDB SQL docs for more information on SQL syntax:
            /// <a href="https://spacetimedb.com/docs/sql">https://spacetimedb.com/docs/sql</a>
            /// </summary>
            public SubscriptionHandle Subscribe(
                string[] querySqls
            ) => new(conn, Applied, Error, querySqls);

            /// <summary>
            /// Subscribe to all rows from all tables.
            ///
            /// This method is intended as a convenience
            /// for applications where client-side memory use and network bandwidth are not concerns.
            /// Applications where these resources are a constraint
            /// should register more precise queries via <c>Self.Subscribe</c>
            /// in order to replicate only the subset of data which the client needs to function.
            ///
            /// This method should not be combined with <c>Self.Subscribe</c> on the same <c>DbConnection</c>.
            /// A connection may either <c>Self.Subscribe</c> to particular queries,
            /// or <c>Self.SubscribeToAllTables</c>, but not both.
            /// Attempting to call <c>Self.Subscribe</c>
            /// on a <c>DbConnection</c> that has previously used <c>Self.SubscribeToAllTables</c>,
            /// or vice versa, may misbehave in any number of ways,
            /// including dropping subscriptions, corrupting the client cache, or panicking.
            /// </summary>
            public void SubscribeToAllTables()
            {
                // Make sure we use the legacy handle constructor here, even though there's only 1 query.
                // We drop the error handler, since it can't be called for legacy subscriptions.
                new SubscriptionHandle(
                    conn,
                    Applied,
                    new string[] { "SELECT * FROM *" }
                );
            }
        }

        public sealed class SubscriptionHandle : SubscriptionHandleBase<SubscriptionEventContext, ErrorContext> {
            /// <summary>
            /// Internal API. Construct <c>SubscriptionHandle</c>s using <c>conn.SubscriptionBuilder</c>.
            /// </summary>
            public SubscriptionHandle(IDbConnection conn, Action<SubscriptionEventContext>? onApplied, string[] querySqls) : base(conn, onApplied, querySqls)
            { }

            /// <summary>
            /// Internal API. Construct <c>SubscriptionHandle</c>s using <c>conn.SubscriptionBuilder</c>.
            /// </summary>
            public SubscriptionHandle(
                IDbConnection conn,
                Action<SubscriptionEventContext>? onApplied,
                Action<ErrorContext, Exception>? onError,
                string[] querySqls
            ) : base(conn, onApplied, onError, querySqls)
            { }
        }

    public abstract partial class Reducer
    {
        private Reducer() { }
    }

    public sealed class DbConnection : DbConnectionBase<DbConnection, RemoteTables, Reducer>
    {
        public override RemoteTables Db { get; }
        public readonly RemoteReducers Reducers;
        public readonly SetReducerFlags SetReducerFlags = new();

        public DbConnection()
        {
            Db = new(this);
            Reducers = new(this, SetReducerFlags);
        }

        protected override Reducer ToReducer(TransactionUpdate update)
        {
            var encodedArgs = update.ReducerCall.Args;
            return update.ReducerCall.ReducerName switch {
                "admin_broadcast_msg" => BSATNHelpers.Decode<Reducer.AdminBroadcastMsg>(encodedArgs),
                "admin_grant_shards" => BSATNHelpers.Decode<Reducer.AdminGrantShards>(encodedArgs),
                "admin_sign_out_all" => BSATNHelpers.Decode<Reducer.AdminSignOutAll>(encodedArgs),
                "admin_skip_queue_entity" => BSATNHelpers.Decode<Reducer.AdminSkipQueueEntity>(encodedArgs),
                "admin_skip_queue_identity" => BSATNHelpers.Decode<Reducer.AdminSkipQueueIdentity>(encodedArgs),
                "admin_skip_queue_name" => BSATNHelpers.Decode<Reducer.AdminSkipQueueName>(encodedArgs),
                "admin_update_granted_hub_item_state" => BSATNHelpers.Decode<Reducer.AdminUpdateGrantedHubItemState>(encodedArgs),
                "admin_update_sign_in_parameters" => BSATNHelpers.Decode<Reducer.AdminUpdateSignInParameters>(encodedArgs),
                "authenticate" => BSATNHelpers.Decode<Reducer.Authenticate>(encodedArgs),
                "cheat_empire_siege_add_supplies" => BSATNHelpers.Decode<Reducer.CheatEmpireSiegeAddSupplies>(encodedArgs),
                "cheat_empire_siege_cancel" => BSATNHelpers.Decode<Reducer.CheatEmpireSiegeCancel>(encodedArgs),
                "cheat_player_set_name" => BSATNHelpers.Decode<Reducer.CheatPlayerSetName>(encodedArgs),
                "cheat_shards_grant" => BSATNHelpers.Decode<Reducer.CheatShardsGrant>(encodedArgs),
                "clear_staged_static_data" => BSATNHelpers.Decode<Reducer.ClearStagedStaticData>(encodedArgs),
                "commit_staged_static_data" => BSATNHelpers.Decode<Reducer.CommitStagedStaticData>(encodedArgs),
                "current_version" => BSATNHelpers.Decode<Reducer.CurrentVersion>(encodedArgs),
                "empire_change_emblem" => BSATNHelpers.Decode<Reducer.EmpireChangeEmblem>(encodedArgs),
                "empire_craft_supplies" => BSATNHelpers.Decode<Reducer.EmpireCraftSupplies>(encodedArgs),
                "empire_craft_supplies_scheduled" => BSATNHelpers.Decode<Reducer.EmpireCraftSuppliesScheduled>(encodedArgs),
                "empire_decay_agent_loop" => BSATNHelpers.Decode<Reducer.EmpireDecayAgentLoop>(encodedArgs),
                "empire_dismantle" => BSATNHelpers.Decode<Reducer.EmpireDismantle>(encodedArgs),
                "empire_donate_shards" => BSATNHelpers.Decode<Reducer.EmpireDonateShards>(encodedArgs),
                "empire_form" => BSATNHelpers.Decode<Reducer.EmpireForm>(encodedArgs),
                "empire_leave" => BSATNHelpers.Decode<Reducer.EmpireLeave>(encodedArgs),
                "empire_mark_for_expansion" => BSATNHelpers.Decode<Reducer.EmpireMarkForExpansion>(encodedArgs),
                "empire_mark_for_siege" => BSATNHelpers.Decode<Reducer.EmpireMarkForSiege>(encodedArgs),
                "empire_player_join" => BSATNHelpers.Decode<Reducer.EmpirePlayerJoin>(encodedArgs),
                "empire_player_leave" => BSATNHelpers.Decode<Reducer.EmpirePlayerLeave>(encodedArgs),
                "empire_set_directive_message" => BSATNHelpers.Decode<Reducer.EmpireSetDirectiveMessage>(encodedArgs),
                "empire_set_nobility_threshold" => BSATNHelpers.Decode<Reducer.EmpireSetNobilityThreshold>(encodedArgs),
                "empire_set_player_rank" => BSATNHelpers.Decode<Reducer.EmpireSetPlayerRank>(encodedArgs),
                "empire_set_rank_title" => BSATNHelpers.Decode<Reducer.EmpireSetRankTitle>(encodedArgs),
                "empire_siege_agent_loop" => BSATNHelpers.Decode<Reducer.EmpireSiegeAgentLoop>(encodedArgs),
                "empire_submit" => BSATNHelpers.Decode<Reducer.EmpireSubmit>(encodedArgs),
                "empire_transfer_emperorship" => BSATNHelpers.Decode<Reducer.EmpireTransferEmperorship>(encodedArgs),
                "empire_update_permissions" => BSATNHelpers.Decode<Reducer.EmpireUpdatePermissions>(encodedArgs),
                "identity_disconnected" => BSATNHelpers.Decode<Reducer.IdentityDisconnected>(encodedArgs),
                "import_achievement_desc" => BSATNHelpers.Decode<Reducer.ImportAchievementDesc>(encodedArgs),
                "import_active_buff_state" => BSATNHelpers.Decode<Reducer.ImportActiveBuffState>(encodedArgs),
                "import_admin_broadcast" => BSATNHelpers.Decode<Reducer.ImportAdminBroadcast>(encodedArgs),
                "import_alert_desc" => BSATNHelpers.Decode<Reducer.ImportAlertDesc>(encodedArgs),
                "import_alert_state" => BSATNHelpers.Decode<Reducer.ImportAlertState>(encodedArgs),
                "import_attack_outcome_state" => BSATNHelpers.Decode<Reducer.ImportAttackOutcomeState>(encodedArgs),
                "import_biome_desc" => BSATNHelpers.Decode<Reducer.ImportBiomeDesc>(encodedArgs),
                "import_buff_desc" => BSATNHelpers.Decode<Reducer.ImportBuffDesc>(encodedArgs),
                "import_buff_type_desc" => BSATNHelpers.Decode<Reducer.ImportBuffTypeDesc>(encodedArgs),
                "import_building_claim_desc" => BSATNHelpers.Decode<Reducer.ImportBuildingClaimDesc>(encodedArgs),
                "import_building_desc" => BSATNHelpers.Decode<Reducer.ImportBuildingDesc>(encodedArgs),
                "import_building_portal_desc" => BSATNHelpers.Decode<Reducer.ImportBuildingPortalDesc>(encodedArgs),
                "import_building_repairs_desc" => BSATNHelpers.Decode<Reducer.ImportBuildingRepairsDesc>(encodedArgs),
                "import_building_spawn_desc" => BSATNHelpers.Decode<Reducer.ImportBuildingSpawnDesc>(encodedArgs),
                "import_building_state" => BSATNHelpers.Decode<Reducer.ImportBuildingState>(encodedArgs),
                "import_building_type_desc" => BSATNHelpers.Decode<Reducer.ImportBuildingTypeDesc>(encodedArgs),
                "import_cargo_desc" => BSATNHelpers.Decode<Reducer.ImportCargoDesc>(encodedArgs),
                "import_character_stat_desc" => BSATNHelpers.Decode<Reducer.ImportCharacterStatDesc>(encodedArgs),
                "import_character_stats_state" => BSATNHelpers.Decode<Reducer.ImportCharacterStatsState>(encodedArgs),
                "import_chat_message_state" => BSATNHelpers.Decode<Reducer.ImportChatMessageState>(encodedArgs),
                "import_chest_rarity_desc" => BSATNHelpers.Decode<Reducer.ImportChestRarityDesc>(encodedArgs),
                "import_claim_local_state" => BSATNHelpers.Decode<Reducer.ImportClaimLocalState>(encodedArgs),
                "import_claim_recruitment_state" => BSATNHelpers.Decode<Reducer.ImportClaimRecruitmentState>(encodedArgs),
                "import_claim_state" => BSATNHelpers.Decode<Reducer.ImportClaimState>(encodedArgs),
                "import_claim_tech_desc" => BSATNHelpers.Decode<Reducer.ImportClaimTechDesc>(encodedArgs),
                "import_claim_tech_state" => BSATNHelpers.Decode<Reducer.ImportClaimTechState>(encodedArgs),
                "import_claim_tile_cost" => BSATNHelpers.Decode<Reducer.ImportClaimTileCost>(encodedArgs),
                "import_claim_tile_state" => BSATNHelpers.Decode<Reducer.ImportClaimTileState>(encodedArgs),
                "import_climb_requirement_desc" => BSATNHelpers.Decode<Reducer.ImportClimbRequirementDesc>(encodedArgs),
                "import_clothing_desc" => BSATNHelpers.Decode<Reducer.ImportClothingDesc>(encodedArgs),
                "import_collectible_desc" => BSATNHelpers.Decode<Reducer.ImportCollectibleDesc>(encodedArgs),
                "import_combat_action_desc" => BSATNHelpers.Decode<Reducer.ImportCombatActionDesc>(encodedArgs),
                "import_combat_state" => BSATNHelpers.Decode<Reducer.ImportCombatState>(encodedArgs),
                "import_config" => BSATNHelpers.Decode<Reducer.ImportConfig>(encodedArgs),
                "import_construction_recipe_desc" => BSATNHelpers.Decode<Reducer.ImportConstructionRecipeDesc>(encodedArgs),
                "import_crafting_recipe_desc" => BSATNHelpers.Decode<Reducer.ImportCraftingRecipeDesc>(encodedArgs),
                "import_deconstruction_recipe_desc" => BSATNHelpers.Decode<Reducer.ImportDeconstructionRecipeDesc>(encodedArgs),
                "import_deployable_desc" => BSATNHelpers.Decode<Reducer.ImportDeployableDesc>(encodedArgs),
                "import_deployable_state" => BSATNHelpers.Decode<Reducer.ImportDeployableState>(encodedArgs),
                "import_dimension_description_state" => BSATNHelpers.Decode<Reducer.ImportDimensionDescriptionState>(encodedArgs),
                "import_dimension_network_description_state" => BSATNHelpers.Decode<Reducer.ImportDimensionNetworkDescriptionState>(encodedArgs),
                "import_distant_visible_entity_desc" => BSATNHelpers.Decode<Reducer.ImportDistantVisibleEntityDesc>(encodedArgs),
                "import_dropped_inventory_state" => BSATNHelpers.Decode<Reducer.ImportDroppedInventoryState>(encodedArgs),
                "import_elevator_desc" => BSATNHelpers.Decode<Reducer.ImportElevatorDesc>(encodedArgs),
                "import_emote_desc" => BSATNHelpers.Decode<Reducer.ImportEmoteDesc>(encodedArgs),
                "import_empire_colors_desc" => BSATNHelpers.Decode<Reducer.ImportEmpireColorsDesc>(encodedArgs),
                "import_empire_notification_desc" => BSATNHelpers.Decode<Reducer.ImportEmpireNotificationDesc>(encodedArgs),
                "import_empire_rank_desc" => BSATNHelpers.Decode<Reducer.ImportEmpireRankDesc>(encodedArgs),
                "import_empire_supplies_desc" => BSATNHelpers.Decode<Reducer.ImportEmpireSuppliesDesc>(encodedArgs),
                "import_empire_territory_desc" => BSATNHelpers.Decode<Reducer.ImportEmpireTerritoryDesc>(encodedArgs),
                "import_enemy_ai_params_desc" => BSATNHelpers.Decode<Reducer.ImportEnemyAiParamsDesc>(encodedArgs),
                "import_enemy_desc" => BSATNHelpers.Decode<Reducer.ImportEnemyDesc>(encodedArgs),
                "import_enemy_state" => BSATNHelpers.Decode<Reducer.ImportEnemyState>(encodedArgs),
                "import_environment_debuff_desc" => BSATNHelpers.Decode<Reducer.ImportEnvironmentDebuffDesc>(encodedArgs),
                "import_equipment_desc" => BSATNHelpers.Decode<Reducer.ImportEquipmentDesc>(encodedArgs),
                "import_equipment_state" => BSATNHelpers.Decode<Reducer.ImportEquipmentState>(encodedArgs),
                "import_experience_state" => BSATNHelpers.Decode<Reducer.ImportExperienceState>(encodedArgs),
                "import_exploration_chunks_state" => BSATNHelpers.Decode<Reducer.ImportExplorationChunksState>(encodedArgs),
                "import_extraction_recipe_desc" => BSATNHelpers.Decode<Reducer.ImportExtractionRecipeDesc>(encodedArgs),
                "import_food_desc" => BSATNHelpers.Decode<Reducer.ImportFoodDesc>(encodedArgs),
                "import_footprint_tile_state" => BSATNHelpers.Decode<Reducer.ImportFootprintTileState>(encodedArgs),
                "import_gate_desc" => BSATNHelpers.Decode<Reducer.ImportGateDesc>(encodedArgs),
                "import_globals" => BSATNHelpers.Decode<Reducer.ImportGlobals>(encodedArgs),
                "import_growth_state" => BSATNHelpers.Decode<Reducer.ImportGrowthState>(encodedArgs),
                "import_health_state" => BSATNHelpers.Decode<Reducer.ImportHealthState>(encodedArgs),
                "import_herd_cache" => BSATNHelpers.Decode<Reducer.ImportHerdCache>(encodedArgs),
                "import_hexite_exchange_entry_desc" => BSATNHelpers.Decode<Reducer.ImportHexiteExchangeEntryDesc>(encodedArgs),
                "import_identity_role" => BSATNHelpers.Decode<Reducer.ImportIdentityRole>(encodedArgs),
                "import_interior_collapse_trigger_state" => BSATNHelpers.Decode<Reducer.ImportInteriorCollapseTriggerState>(encodedArgs),
                "import_interior_instance_desc" => BSATNHelpers.Decode<Reducer.ImportInteriorInstanceDesc>(encodedArgs),
                "import_interior_network_desc" => BSATNHelpers.Decode<Reducer.ImportInteriorNetworkDesc>(encodedArgs),
                "import_interior_portal_connections_desc" => BSATNHelpers.Decode<Reducer.ImportInteriorPortalConnectionsDesc>(encodedArgs),
                "import_interior_shape_desc" => BSATNHelpers.Decode<Reducer.ImportInteriorShapeDesc>(encodedArgs),
                "import_interior_spawn_desc" => BSATNHelpers.Decode<Reducer.ImportInteriorSpawnDesc>(encodedArgs),
                "import_inventory_state" => BSATNHelpers.Decode<Reducer.ImportInventoryState>(encodedArgs),
                "import_item_conversion_recipe_desc" => BSATNHelpers.Decode<Reducer.ImportItemConversionRecipeDesc>(encodedArgs),
                "import_item_desc" => BSATNHelpers.Decode<Reducer.ImportItemDesc>(encodedArgs),
                "import_item_list_desc" => BSATNHelpers.Decode<Reducer.ImportItemListDesc>(encodedArgs),
                "import_knowledge_achievement_state" => BSATNHelpers.Decode<Reducer.ImportKnowledgeAchievementState>(encodedArgs),
                "import_knowledge_battle_action_state" => BSATNHelpers.Decode<Reducer.ImportKnowledgeBattleActionState>(encodedArgs),
                "import_knowledge_building_state" => BSATNHelpers.Decode<Reducer.ImportKnowledgeBuildingState>(encodedArgs),
                "import_knowledge_cargo_state" => BSATNHelpers.Decode<Reducer.ImportKnowledgeCargoState>(encodedArgs),
                "import_knowledge_construction_state" => BSATNHelpers.Decode<Reducer.ImportKnowledgeConstructionState>(encodedArgs),
                "import_knowledge_craft_state" => BSATNHelpers.Decode<Reducer.ImportKnowledgeCraftState>(encodedArgs),
                "import_knowledge_deployable_state" => BSATNHelpers.Decode<Reducer.ImportKnowledgeDeployableState>(encodedArgs),
                "import_knowledge_enemy_state" => BSATNHelpers.Decode<Reducer.ImportKnowledgeEnemyState>(encodedArgs),
                "import_knowledge_extract_state" => BSATNHelpers.Decode<Reducer.ImportKnowledgeExtractState>(encodedArgs),
                "import_knowledge_item_state" => BSATNHelpers.Decode<Reducer.ImportKnowledgeItemState>(encodedArgs),
                "import_knowledge_lore_state" => BSATNHelpers.Decode<Reducer.ImportKnowledgeLoreState>(encodedArgs),
                "import_knowledge_npc_state" => BSATNHelpers.Decode<Reducer.ImportKnowledgeNpcState>(encodedArgs),
                "import_knowledge_paving_state" => BSATNHelpers.Decode<Reducer.ImportKnowledgePavingState>(encodedArgs),
                "import_knowledge_resource_placement_state" => BSATNHelpers.Decode<Reducer.ImportKnowledgeResourcePlacementState>(encodedArgs),
                "import_knowledge_resource_state" => BSATNHelpers.Decode<Reducer.ImportKnowledgeResourceState>(encodedArgs),
                "import_knowledge_ruins_state" => BSATNHelpers.Decode<Reducer.ImportKnowledgeRuinsState>(encodedArgs),
                "import_knowledge_scroll_desc" => BSATNHelpers.Decode<Reducer.ImportKnowledgeScrollDesc>(encodedArgs),
                "import_knowledge_scroll_type_desc" => BSATNHelpers.Decode<Reducer.ImportKnowledgeScrollTypeDesc>(encodedArgs),
                "import_knowledge_secondary_state" => BSATNHelpers.Decode<Reducer.ImportKnowledgeSecondaryState>(encodedArgs),
                "import_knowledge_stat_modifier_desc" => BSATNHelpers.Decode<Reducer.ImportKnowledgeStatModifierDesc>(encodedArgs),
                "import_knowledge_vault_state" => BSATNHelpers.Decode<Reducer.ImportKnowledgeVaultState>(encodedArgs),
                "import_location_state" => BSATNHelpers.Decode<Reducer.ImportLocationState>(encodedArgs),
                "import_loot_chest_desc" => BSATNHelpers.Decode<Reducer.ImportLootChestDesc>(encodedArgs),
                "import_loot_chest_state" => BSATNHelpers.Decode<Reducer.ImportLootChestState>(encodedArgs),
                "import_loot_rarity_desc" => BSATNHelpers.Decode<Reducer.ImportLootRarityDesc>(encodedArgs),
                "import_loot_table_desc" => BSATNHelpers.Decode<Reducer.ImportLootTableDesc>(encodedArgs),
                "import_mobile_entity_state" => BSATNHelpers.Decode<Reducer.ImportMobileEntityState>(encodedArgs),
                "import_mounting_state" => BSATNHelpers.Decode<Reducer.ImportMountingState>(encodedArgs),
                "import_npc_desc" => BSATNHelpers.Decode<Reducer.ImportNpcDesc>(encodedArgs),
                "import_npc_state" => BSATNHelpers.Decode<Reducer.ImportNpcState>(encodedArgs),
                "import_onboarding_reward_desc" => BSATNHelpers.Decode<Reducer.ImportOnboardingRewardDesc>(encodedArgs),
                "import_onboarding_state" => BSATNHelpers.Decode<Reducer.ImportOnboardingState>(encodedArgs),
                "import_parameters_desc" => BSATNHelpers.Decode<Reducer.ImportParametersDesc>(encodedArgs),
                "import_pathfinding_desc" => BSATNHelpers.Decode<Reducer.ImportPathfindingDesc>(encodedArgs),
                "import_paved_tile_state" => BSATNHelpers.Decode<Reducer.ImportPavedTileState>(encodedArgs),
                "import_paving_tile_desc" => BSATNHelpers.Decode<Reducer.ImportPavingTileDesc>(encodedArgs),
                "import_player_action_desc" => BSATNHelpers.Decode<Reducer.ImportPlayerActionDesc>(encodedArgs),
                "import_player_action_state" => BSATNHelpers.Decode<Reducer.ImportPlayerActionState>(encodedArgs),
                "import_player_prefs_state" => BSATNHelpers.Decode<Reducer.ImportPlayerPrefsState>(encodedArgs),
                "import_player_state" => BSATNHelpers.Decode<Reducer.ImportPlayerState>(encodedArgs),
                "import_player_vote_state" => BSATNHelpers.Decode<Reducer.ImportPlayerVoteState>(encodedArgs),
                "import_portal_state" => BSATNHelpers.Decode<Reducer.ImportPortalState>(encodedArgs),
                "import_private_parameters_desc" => BSATNHelpers.Decode<Reducer.ImportPrivateParametersDesc>(encodedArgs),
                "import_progressive_action_state" => BSATNHelpers.Decode<Reducer.ImportProgressiveActionState>(encodedArgs),
                "import_project_site_state" => BSATNHelpers.Decode<Reducer.ImportProjectSiteState>(encodedArgs),
                "import_region_connection_info" => BSATNHelpers.Decode<Reducer.ImportRegionConnectionInfo>(encodedArgs),
                "import_region_sign_in_parameters" => BSATNHelpers.Decode<Reducer.ImportRegionSignInParameters>(encodedArgs),
                "import_rent_state" => BSATNHelpers.Decode<Reducer.ImportRentState>(encodedArgs),
                "import_resource_clump_desc" => BSATNHelpers.Decode<Reducer.ImportResourceClumpDesc>(encodedArgs),
                "import_resource_count" => BSATNHelpers.Decode<Reducer.ImportResourceCount>(encodedArgs),
                "import_resource_desc" => BSATNHelpers.Decode<Reducer.ImportResourceDesc>(encodedArgs),
                "import_resource_growth_recipe_desc" => BSATNHelpers.Decode<Reducer.ImportResourceGrowthRecipeDesc>(encodedArgs),
                "import_resource_placement_recipe_desc" => BSATNHelpers.Decode<Reducer.ImportResourcePlacementRecipeDesc>(encodedArgs),
                "import_resource_state" => BSATNHelpers.Decode<Reducer.ImportResourceState>(encodedArgs),
                "import_satiation_state" => BSATNHelpers.Decode<Reducer.ImportSatiationState>(encodedArgs),
                "import_secondary_knowledge_desc" => BSATNHelpers.Decode<Reducer.ImportSecondaryKnowledgeDesc>(encodedArgs),
                "import_server_identity" => BSATNHelpers.Decode<Reducer.ImportServerIdentity>(encodedArgs),
                "import_signed_in_player_state" => BSATNHelpers.Decode<Reducer.ImportSignedInPlayerState>(encodedArgs),
                "import_skill_desc" => BSATNHelpers.Decode<Reducer.ImportSkillDesc>(encodedArgs),
                "import_stamina_state" => BSATNHelpers.Decode<Reducer.ImportStaminaState>(encodedArgs),
                "import_target_state" => BSATNHelpers.Decode<Reducer.ImportTargetState>(encodedArgs),
                "import_targetable_state" => BSATNHelpers.Decode<Reducer.ImportTargetableState>(encodedArgs),
                "import_targeting_matrix_desc" => BSATNHelpers.Decode<Reducer.ImportTargetingMatrixDesc>(encodedArgs),
                "import_teleport_item_desc" => BSATNHelpers.Decode<Reducer.ImportTeleportItemDesc>(encodedArgs),
                "import_terraform_recipe_desc" => BSATNHelpers.Decode<Reducer.ImportTerraformRecipeDesc>(encodedArgs),
                "import_terrain_chunk_state" => BSATNHelpers.Decode<Reducer.ImportTerrainChunkState>(encodedArgs),
                "import_tool_desc" => BSATNHelpers.Decode<Reducer.ImportToolDesc>(encodedArgs),
                "import_tool_type_desc" => BSATNHelpers.Decode<Reducer.ImportToolTypeDesc>(encodedArgs),
                "import_trade_order_state" => BSATNHelpers.Decode<Reducer.ImportTradeOrderState>(encodedArgs),
                "import_trade_session_state" => BSATNHelpers.Decode<Reducer.ImportTradeSessionState>(encodedArgs),
                "import_traveler_task_desc" => BSATNHelpers.Decode<Reducer.ImportTravelerTaskDesc>(encodedArgs),
                "import_traveler_trade_order_desc" => BSATNHelpers.Decode<Reducer.ImportTravelerTradeOrderDesc>(encodedArgs),
                "import_user_moderation_state" => BSATNHelpers.Decode<Reducer.ImportUserModerationState>(encodedArgs),
                "import_user_state" => BSATNHelpers.Decode<Reducer.ImportUserState>(encodedArgs),
                "import_vault_state" => BSATNHelpers.Decode<Reducer.ImportVaultState>(encodedArgs),
                "import_wall_desc" => BSATNHelpers.Decode<Reducer.ImportWallDesc>(encodedArgs),
                "import_weapon_desc" => BSATNHelpers.Decode<Reducer.ImportWeaponDesc>(encodedArgs),
                "import_weapon_type_desc" => BSATNHelpers.Decode<Reducer.ImportWeaponTypeDesc>(encodedArgs),
                "import_world_region_name_state" => BSATNHelpers.Decode<Reducer.ImportWorldRegionNameState>(encodedArgs),
                "import_world_region_state" => BSATNHelpers.Decode<Reducer.ImportWorldRegionState>(encodedArgs),
                "load_config" => BSATNHelpers.Decode<Reducer.LoadConfig>(encodedArgs),
                "log_empire_leaderboard" => BSATNHelpers.Decode<Reducer.LogEmpireLeaderboard>(encodedArgs),
                "log_player_with_" => BSATNHelpers.Decode<Reducer.LogPlayerWith>(encodedArgs),
                "on_inter_module_message_processed" => BSATNHelpers.Decode<Reducer.OnInterModuleMessageProcessed>(encodedArgs),
                "player_claim_daily_shards" => BSATNHelpers.Decode<Reducer.PlayerClaimDailyShards>(encodedArgs),
                "player_create" => BSATNHelpers.Decode<Reducer.PlayerCreate>(encodedArgs),
                "player_notification_event_reducer" => BSATNHelpers.Decode<Reducer.PlayerNotificationEventReducer>(encodedArgs),
                "player_set_name" => BSATNHelpers.Decode<Reducer.PlayerSetName>(encodedArgs),
                "player_vote_answer" => BSATNHelpers.Decode<Reducer.PlayerVoteAnswer>(encodedArgs),
                "player_vote_conclude" => BSATNHelpers.Decode<Reducer.PlayerVoteConclude>(encodedArgs),
                "process_inter_module_message" => BSATNHelpers.Decode<Reducer.ProcessInterModuleMessage>(encodedArgs),
                "set_role_for_identity" => BSATNHelpers.Decode<Reducer.SetRoleForIdentity>(encodedArgs),
                "sign_in" => BSATNHelpers.Decode<Reducer.SignIn>(encodedArgs),
                "stage_achievement_desc" => BSATNHelpers.Decode<Reducer.StageAchievementDesc>(encodedArgs),
                "stage_alert_desc" => BSATNHelpers.Decode<Reducer.StageAlertDesc>(encodedArgs),
                "stage_biome_desc" => BSATNHelpers.Decode<Reducer.StageBiomeDesc>(encodedArgs),
                "stage_buff_desc" => BSATNHelpers.Decode<Reducer.StageBuffDesc>(encodedArgs),
                "stage_buff_type_desc" => BSATNHelpers.Decode<Reducer.StageBuffTypeDesc>(encodedArgs),
                "stage_building_claim_desc" => BSATNHelpers.Decode<Reducer.StageBuildingClaimDesc>(encodedArgs),
                "stage_building_desc" => BSATNHelpers.Decode<Reducer.StageBuildingDesc>(encodedArgs),
                "stage_building_portal_desc" => BSATNHelpers.Decode<Reducer.StageBuildingPortalDesc>(encodedArgs),
                "stage_building_repairs_desc" => BSATNHelpers.Decode<Reducer.StageBuildingRepairsDesc>(encodedArgs),
                "stage_building_spawn_desc" => BSATNHelpers.Decode<Reducer.StageBuildingSpawnDesc>(encodedArgs),
                "stage_building_type_desc" => BSATNHelpers.Decode<Reducer.StageBuildingTypeDesc>(encodedArgs),
                "stage_cargo_desc" => BSATNHelpers.Decode<Reducer.StageCargoDesc>(encodedArgs),
                "stage_character_stat_desc" => BSATNHelpers.Decode<Reducer.StageCharacterStatDesc>(encodedArgs),
                "stage_chest_rarity_desc" => BSATNHelpers.Decode<Reducer.StageChestRarityDesc>(encodedArgs),
                "stage_claim_tech_desc" => BSATNHelpers.Decode<Reducer.StageClaimTechDesc>(encodedArgs),
                "stage_claim_tile_cost" => BSATNHelpers.Decode<Reducer.StageClaimTileCost>(encodedArgs),
                "stage_climb_requirement_desc" => BSATNHelpers.Decode<Reducer.StageClimbRequirementDesc>(encodedArgs),
                "stage_clothing_desc" => BSATNHelpers.Decode<Reducer.StageClothingDesc>(encodedArgs),
                "stage_collectible_desc" => BSATNHelpers.Decode<Reducer.StageCollectibleDesc>(encodedArgs),
                "stage_combat_action_desc" => BSATNHelpers.Decode<Reducer.StageCombatActionDesc>(encodedArgs),
                "stage_construction_recipe_desc" => BSATNHelpers.Decode<Reducer.StageConstructionRecipeDesc>(encodedArgs),
                "stage_crafting_recipe_desc" => BSATNHelpers.Decode<Reducer.StageCraftingRecipeDesc>(encodedArgs),
                "stage_deconstruction_recipe_desc" => BSATNHelpers.Decode<Reducer.StageDeconstructionRecipeDesc>(encodedArgs),
                "stage_deployable_desc" => BSATNHelpers.Decode<Reducer.StageDeployableDesc>(encodedArgs),
                "stage_distant_visible_entity_desc" => BSATNHelpers.Decode<Reducer.StageDistantVisibleEntityDesc>(encodedArgs),
                "stage_elevator_desc" => BSATNHelpers.Decode<Reducer.StageElevatorDesc>(encodedArgs),
                "stage_emote_desc" => BSATNHelpers.Decode<Reducer.StageEmoteDesc>(encodedArgs),
                "stage_empire_colors_desc" => BSATNHelpers.Decode<Reducer.StageEmpireColorsDesc>(encodedArgs),
                "stage_empire_icon_desc" => BSATNHelpers.Decode<Reducer.StageEmpireIconDesc>(encodedArgs),
                "stage_empire_notification_desc" => BSATNHelpers.Decode<Reducer.StageEmpireNotificationDesc>(encodedArgs),
                "stage_empire_rank_desc" => BSATNHelpers.Decode<Reducer.StageEmpireRankDesc>(encodedArgs),
                "stage_empire_supplies_desc" => BSATNHelpers.Decode<Reducer.StageEmpireSuppliesDesc>(encodedArgs),
                "stage_empire_territory_desc" => BSATNHelpers.Decode<Reducer.StageEmpireTerritoryDesc>(encodedArgs),
                "stage_enemy_ai_params_desc" => BSATNHelpers.Decode<Reducer.StageEnemyAiParamsDesc>(encodedArgs),
                "stage_enemy_desc" => BSATNHelpers.Decode<Reducer.StageEnemyDesc>(encodedArgs),
                "stage_environment_debuff_desc" => BSATNHelpers.Decode<Reducer.StageEnvironmentDebuffDesc>(encodedArgs),
                "stage_equipment_desc" => BSATNHelpers.Decode<Reducer.StageEquipmentDesc>(encodedArgs),
                "stage_extraction_recipe_desc" => BSATNHelpers.Decode<Reducer.StageExtractionRecipeDesc>(encodedArgs),
                "stage_food_desc" => BSATNHelpers.Decode<Reducer.StageFoodDesc>(encodedArgs),
                "stage_gate_desc" => BSATNHelpers.Decode<Reducer.StageGateDesc>(encodedArgs),
                "stage_hexite_exchange_entry_desc" => BSATNHelpers.Decode<Reducer.StageHexiteExchangeEntryDesc>(encodedArgs),
                "stage_interior_environment_desc" => BSATNHelpers.Decode<Reducer.StageInteriorEnvironmentDesc>(encodedArgs),
                "stage_interior_instance_desc" => BSATNHelpers.Decode<Reducer.StageInteriorInstanceDesc>(encodedArgs),
                "stage_interior_network_desc" => BSATNHelpers.Decode<Reducer.StageInteriorNetworkDesc>(encodedArgs),
                "stage_interior_portal_connections_desc" => BSATNHelpers.Decode<Reducer.StageInteriorPortalConnectionsDesc>(encodedArgs),
                "stage_interior_shape_desc" => BSATNHelpers.Decode<Reducer.StageInteriorShapeDesc>(encodedArgs),
                "stage_interior_spawn_desc" => BSATNHelpers.Decode<Reducer.StageInteriorSpawnDesc>(encodedArgs),
                "stage_item_conversion_recipe_desc" => BSATNHelpers.Decode<Reducer.StageItemConversionRecipeDesc>(encodedArgs),
                "stage_item_desc" => BSATNHelpers.Decode<Reducer.StageItemDesc>(encodedArgs),
                "stage_item_list_desc" => BSATNHelpers.Decode<Reducer.StageItemListDesc>(encodedArgs),
                "stage_knowledge_scroll_desc" => BSATNHelpers.Decode<Reducer.StageKnowledgeScrollDesc>(encodedArgs),
                "stage_knowledge_scroll_type_desc" => BSATNHelpers.Decode<Reducer.StageKnowledgeScrollTypeDesc>(encodedArgs),
                "stage_knowledge_stat_modifier_desc" => BSATNHelpers.Decode<Reducer.StageKnowledgeStatModifierDesc>(encodedArgs),
                "stage_loot_chest_desc" => BSATNHelpers.Decode<Reducer.StageLootChestDesc>(encodedArgs),
                "stage_loot_rarity_desc" => BSATNHelpers.Decode<Reducer.StageLootRarityDesc>(encodedArgs),
                "stage_loot_table_desc" => BSATNHelpers.Decode<Reducer.StageLootTableDesc>(encodedArgs),
                "stage_npc_desc" => BSATNHelpers.Decode<Reducer.StageNpcDesc>(encodedArgs),
                "stage_onboarding_reward_desc" => BSATNHelpers.Decode<Reducer.StageOnboardingRewardDesc>(encodedArgs),
                "stage_parameters_desc" => BSATNHelpers.Decode<Reducer.StageParametersDesc>(encodedArgs),
                "stage_pathfinding_desc" => BSATNHelpers.Decode<Reducer.StagePathfindingDesc>(encodedArgs),
                "stage_paving_tile_desc" => BSATNHelpers.Decode<Reducer.StagePavingTileDesc>(encodedArgs),
                "stage_pillar_shaping_desc" => BSATNHelpers.Decode<Reducer.StagePillarShapingDesc>(encodedArgs),
                "stage_player_action_desc" => BSATNHelpers.Decode<Reducer.StagePlayerActionDesc>(encodedArgs),
                "stage_player_housing_desc" => BSATNHelpers.Decode<Reducer.StagePlayerHousingDesc>(encodedArgs),
                "stage_private_parameters_desc" => BSATNHelpers.Decode<Reducer.StagePrivateParametersDesc>(encodedArgs),
                "stage_resource_clump_desc" => BSATNHelpers.Decode<Reducer.StageResourceClumpDesc>(encodedArgs),
                "stage_resource_desc" => BSATNHelpers.Decode<Reducer.StageResourceDesc>(encodedArgs),
                "stage_resource_growth_recipe_desc" => BSATNHelpers.Decode<Reducer.StageResourceGrowthRecipeDesc>(encodedArgs),
                "stage_resource_placement_recipe_desc" => BSATNHelpers.Decode<Reducer.StageResourcePlacementRecipeDesc>(encodedArgs),
                "stage_secondary_knowledge_desc" => BSATNHelpers.Decode<Reducer.StageSecondaryKnowledgeDesc>(encodedArgs),
                "stage_skill_desc" => BSATNHelpers.Decode<Reducer.StageSkillDesc>(encodedArgs),
                "stage_targeting_matrix_desc" => BSATNHelpers.Decode<Reducer.StageTargetingMatrixDesc>(encodedArgs),
                "stage_teleport_item_desc" => BSATNHelpers.Decode<Reducer.StageTeleportItemDesc>(encodedArgs),
                "stage_terraform_recipe_desc" => BSATNHelpers.Decode<Reducer.StageTerraformRecipeDesc>(encodedArgs),
                "stage_tool_desc" => BSATNHelpers.Decode<Reducer.StageToolDesc>(encodedArgs),
                "stage_tool_type_desc" => BSATNHelpers.Decode<Reducer.StageToolTypeDesc>(encodedArgs),
                "stage_traveler_task_desc" => BSATNHelpers.Decode<Reducer.StageTravelerTaskDesc>(encodedArgs),
                "stage_traveler_trade_order_desc" => BSATNHelpers.Decode<Reducer.StageTravelerTradeOrderDesc>(encodedArgs),
                "stage_wall_desc" => BSATNHelpers.Decode<Reducer.StageWallDesc>(encodedArgs),
                "stage_weapon_desc" => BSATNHelpers.Decode<Reducer.StageWeaponDesc>(encodedArgs),
                "stage_weapon_type_desc" => BSATNHelpers.Decode<Reducer.StageWeaponTypeDesc>(encodedArgs),
                "update_role_for_player" => BSATNHelpers.Decode<Reducer.UpdateRoleForPlayer>(encodedArgs),
                "update_scheduled_timers_from_static_data" => BSATNHelpers.Decode<Reducer.UpdateScheduledTimersFromStaticData>(encodedArgs),
                "user_moderation_clear_all" => BSATNHelpers.Decode<Reducer.UserModerationClearAll>(encodedArgs),
                "user_moderation_create" => BSATNHelpers.Decode<Reducer.UserModerationCreate>(encodedArgs),
                "user_moderation_delete" => BSATNHelpers.Decode<Reducer.UserModerationDelete>(encodedArgs),
                "user_moderation_list_all" => BSATNHelpers.Decode<Reducer.UserModerationListAll>(encodedArgs),
                var reducer => throw new ArgumentOutOfRangeException("Reducer", $"Unknown reducer {reducer}")
            };
        }

        protected override IEventContext ToEventContext(Event<Reducer> Event) =>
        new EventContext(this, Event);

        protected override IReducerEventContext ToReducerEventContext(ReducerEvent<Reducer> reducerEvent) =>
        new ReducerEventContext(this, reducerEvent);

        protected override ISubscriptionEventContext MakeSubscriptionEventContext() =>
        new SubscriptionEventContext(this);

        protected override IErrorContext ToErrorContext(Exception exception) =>
        new ErrorContext(this, exception);

        protected override bool Dispatch(IReducerEventContext context, Reducer reducer)
        {
            var eventContext = (ReducerEventContext)context;
            return reducer switch {
                Reducer.AdminBroadcastMsg args => Reducers.InvokeAdminBroadcastMsg(eventContext, args),
                Reducer.AdminGrantShards args => Reducers.InvokeAdminGrantShards(eventContext, args),
                Reducer.AdminSignOutAll args => Reducers.InvokeAdminSignOutAll(eventContext, args),
                Reducer.AdminSkipQueueEntity args => Reducers.InvokeAdminSkipQueueEntity(eventContext, args),
                Reducer.AdminSkipQueueIdentity args => Reducers.InvokeAdminSkipQueueIdentity(eventContext, args),
                Reducer.AdminSkipQueueName args => Reducers.InvokeAdminSkipQueueName(eventContext, args),
                Reducer.AdminUpdateGrantedHubItemState args => Reducers.InvokeAdminUpdateGrantedHubItemState(eventContext, args),
                Reducer.AdminUpdateSignInParameters args => Reducers.InvokeAdminUpdateSignInParameters(eventContext, args),
                Reducer.Authenticate args => Reducers.InvokeAuthenticate(eventContext, args),
                Reducer.CheatEmpireSiegeAddSupplies args => Reducers.InvokeCheatEmpireSiegeAddSupplies(eventContext, args),
                Reducer.CheatEmpireSiegeCancel args => Reducers.InvokeCheatEmpireSiegeCancel(eventContext, args),
                Reducer.CheatPlayerSetName args => Reducers.InvokeCheatPlayerSetName(eventContext, args),
                Reducer.CheatShardsGrant args => Reducers.InvokeCheatShardsGrant(eventContext, args),
                Reducer.ClearStagedStaticData args => Reducers.InvokeClearStagedStaticData(eventContext, args),
                Reducer.CommitStagedStaticData args => Reducers.InvokeCommitStagedStaticData(eventContext, args),
                Reducer.CurrentVersion args => Reducers.InvokeCurrentVersion(eventContext, args),
                Reducer.EmpireChangeEmblem args => Reducers.InvokeEmpireChangeEmblem(eventContext, args),
                Reducer.EmpireCraftSupplies args => Reducers.InvokeEmpireCraftSupplies(eventContext, args),
                Reducer.EmpireCraftSuppliesScheduled args => Reducers.InvokeEmpireCraftSuppliesScheduled(eventContext, args),
                Reducer.EmpireDecayAgentLoop args => Reducers.InvokeEmpireDecayAgentLoop(eventContext, args),
                Reducer.EmpireDismantle args => Reducers.InvokeEmpireDismantle(eventContext, args),
                Reducer.EmpireDonateShards args => Reducers.InvokeEmpireDonateShards(eventContext, args),
                Reducer.EmpireForm args => Reducers.InvokeEmpireForm(eventContext, args),
                Reducer.EmpireLeave args => Reducers.InvokeEmpireLeave(eventContext, args),
                Reducer.EmpireMarkForExpansion args => Reducers.InvokeEmpireMarkForExpansion(eventContext, args),
                Reducer.EmpireMarkForSiege args => Reducers.InvokeEmpireMarkForSiege(eventContext, args),
                Reducer.EmpirePlayerJoin args => Reducers.InvokeEmpirePlayerJoin(eventContext, args),
                Reducer.EmpirePlayerLeave args => Reducers.InvokeEmpirePlayerLeave(eventContext, args),
                Reducer.EmpireSetDirectiveMessage args => Reducers.InvokeEmpireSetDirectiveMessage(eventContext, args),
                Reducer.EmpireSetNobilityThreshold args => Reducers.InvokeEmpireSetNobilityThreshold(eventContext, args),
                Reducer.EmpireSetPlayerRank args => Reducers.InvokeEmpireSetPlayerRank(eventContext, args),
                Reducer.EmpireSetRankTitle args => Reducers.InvokeEmpireSetRankTitle(eventContext, args),
                Reducer.EmpireSiegeAgentLoop args => Reducers.InvokeEmpireSiegeAgentLoop(eventContext, args),
                Reducer.EmpireSubmit args => Reducers.InvokeEmpireSubmit(eventContext, args),
                Reducer.EmpireTransferEmperorship args => Reducers.InvokeEmpireTransferEmperorship(eventContext, args),
                Reducer.EmpireUpdatePermissions args => Reducers.InvokeEmpireUpdatePermissions(eventContext, args),
                Reducer.IdentityDisconnected args => Reducers.InvokeIdentityDisconnected(eventContext, args),
                Reducer.ImportAchievementDesc args => Reducers.InvokeImportAchievementDesc(eventContext, args),
                Reducer.ImportActiveBuffState args => Reducers.InvokeImportActiveBuffState(eventContext, args),
                Reducer.ImportAdminBroadcast args => Reducers.InvokeImportAdminBroadcast(eventContext, args),
                Reducer.ImportAlertDesc args => Reducers.InvokeImportAlertDesc(eventContext, args),
                Reducer.ImportAlertState args => Reducers.InvokeImportAlertState(eventContext, args),
                Reducer.ImportAttackOutcomeState args => Reducers.InvokeImportAttackOutcomeState(eventContext, args),
                Reducer.ImportBiomeDesc args => Reducers.InvokeImportBiomeDesc(eventContext, args),
                Reducer.ImportBuffDesc args => Reducers.InvokeImportBuffDesc(eventContext, args),
                Reducer.ImportBuffTypeDesc args => Reducers.InvokeImportBuffTypeDesc(eventContext, args),
                Reducer.ImportBuildingClaimDesc args => Reducers.InvokeImportBuildingClaimDesc(eventContext, args),
                Reducer.ImportBuildingDesc args => Reducers.InvokeImportBuildingDesc(eventContext, args),
                Reducer.ImportBuildingPortalDesc args => Reducers.InvokeImportBuildingPortalDesc(eventContext, args),
                Reducer.ImportBuildingRepairsDesc args => Reducers.InvokeImportBuildingRepairsDesc(eventContext, args),
                Reducer.ImportBuildingSpawnDesc args => Reducers.InvokeImportBuildingSpawnDesc(eventContext, args),
                Reducer.ImportBuildingState args => Reducers.InvokeImportBuildingState(eventContext, args),
                Reducer.ImportBuildingTypeDesc args => Reducers.InvokeImportBuildingTypeDesc(eventContext, args),
                Reducer.ImportCargoDesc args => Reducers.InvokeImportCargoDesc(eventContext, args),
                Reducer.ImportCharacterStatDesc args => Reducers.InvokeImportCharacterStatDesc(eventContext, args),
                Reducer.ImportCharacterStatsState args => Reducers.InvokeImportCharacterStatsState(eventContext, args),
                Reducer.ImportChatMessageState args => Reducers.InvokeImportChatMessageState(eventContext, args),
                Reducer.ImportChestRarityDesc args => Reducers.InvokeImportChestRarityDesc(eventContext, args),
                Reducer.ImportClaimLocalState args => Reducers.InvokeImportClaimLocalState(eventContext, args),
                Reducer.ImportClaimRecruitmentState args => Reducers.InvokeImportClaimRecruitmentState(eventContext, args),
                Reducer.ImportClaimState args => Reducers.InvokeImportClaimState(eventContext, args),
                Reducer.ImportClaimTechDesc args => Reducers.InvokeImportClaimTechDesc(eventContext, args),
                Reducer.ImportClaimTechState args => Reducers.InvokeImportClaimTechState(eventContext, args),
                Reducer.ImportClaimTileCost args => Reducers.InvokeImportClaimTileCost(eventContext, args),
                Reducer.ImportClaimTileState args => Reducers.InvokeImportClaimTileState(eventContext, args),
                Reducer.ImportClimbRequirementDesc args => Reducers.InvokeImportClimbRequirementDesc(eventContext, args),
                Reducer.ImportClothingDesc args => Reducers.InvokeImportClothingDesc(eventContext, args),
                Reducer.ImportCollectibleDesc args => Reducers.InvokeImportCollectibleDesc(eventContext, args),
                Reducer.ImportCombatActionDesc args => Reducers.InvokeImportCombatActionDesc(eventContext, args),
                Reducer.ImportCombatState args => Reducers.InvokeImportCombatState(eventContext, args),
                Reducer.ImportConfig args => Reducers.InvokeImportConfig(eventContext, args),
                Reducer.ImportConstructionRecipeDesc args => Reducers.InvokeImportConstructionRecipeDesc(eventContext, args),
                Reducer.ImportCraftingRecipeDesc args => Reducers.InvokeImportCraftingRecipeDesc(eventContext, args),
                Reducer.ImportDeconstructionRecipeDesc args => Reducers.InvokeImportDeconstructionRecipeDesc(eventContext, args),
                Reducer.ImportDeployableDesc args => Reducers.InvokeImportDeployableDesc(eventContext, args),
                Reducer.ImportDeployableState args => Reducers.InvokeImportDeployableState(eventContext, args),
                Reducer.ImportDimensionDescriptionState args => Reducers.InvokeImportDimensionDescriptionState(eventContext, args),
                Reducer.ImportDimensionNetworkDescriptionState args => Reducers.InvokeImportDimensionNetworkDescriptionState(eventContext, args),
                Reducer.ImportDistantVisibleEntityDesc args => Reducers.InvokeImportDistantVisibleEntityDesc(eventContext, args),
                Reducer.ImportDroppedInventoryState args => Reducers.InvokeImportDroppedInventoryState(eventContext, args),
                Reducer.ImportElevatorDesc args => Reducers.InvokeImportElevatorDesc(eventContext, args),
                Reducer.ImportEmoteDesc args => Reducers.InvokeImportEmoteDesc(eventContext, args),
                Reducer.ImportEmpireColorsDesc args => Reducers.InvokeImportEmpireColorsDesc(eventContext, args),
                Reducer.ImportEmpireNotificationDesc args => Reducers.InvokeImportEmpireNotificationDesc(eventContext, args),
                Reducer.ImportEmpireRankDesc args => Reducers.InvokeImportEmpireRankDesc(eventContext, args),
                Reducer.ImportEmpireSuppliesDesc args => Reducers.InvokeImportEmpireSuppliesDesc(eventContext, args),
                Reducer.ImportEmpireTerritoryDesc args => Reducers.InvokeImportEmpireTerritoryDesc(eventContext, args),
                Reducer.ImportEnemyAiParamsDesc args => Reducers.InvokeImportEnemyAiParamsDesc(eventContext, args),
                Reducer.ImportEnemyDesc args => Reducers.InvokeImportEnemyDesc(eventContext, args),
                Reducer.ImportEnemyState args => Reducers.InvokeImportEnemyState(eventContext, args),
                Reducer.ImportEnvironmentDebuffDesc args => Reducers.InvokeImportEnvironmentDebuffDesc(eventContext, args),
                Reducer.ImportEquipmentDesc args => Reducers.InvokeImportEquipmentDesc(eventContext, args),
                Reducer.ImportEquipmentState args => Reducers.InvokeImportEquipmentState(eventContext, args),
                Reducer.ImportExperienceState args => Reducers.InvokeImportExperienceState(eventContext, args),
                Reducer.ImportExplorationChunksState args => Reducers.InvokeImportExplorationChunksState(eventContext, args),
                Reducer.ImportExtractionRecipeDesc args => Reducers.InvokeImportExtractionRecipeDesc(eventContext, args),
                Reducer.ImportFoodDesc args => Reducers.InvokeImportFoodDesc(eventContext, args),
                Reducer.ImportFootprintTileState args => Reducers.InvokeImportFootprintTileState(eventContext, args),
                Reducer.ImportGateDesc args => Reducers.InvokeImportGateDesc(eventContext, args),
                Reducer.ImportGlobals args => Reducers.InvokeImportGlobals(eventContext, args),
                Reducer.ImportGrowthState args => Reducers.InvokeImportGrowthState(eventContext, args),
                Reducer.ImportHealthState args => Reducers.InvokeImportHealthState(eventContext, args),
                Reducer.ImportHerdCache args => Reducers.InvokeImportHerdCache(eventContext, args),
                Reducer.ImportHexiteExchangeEntryDesc args => Reducers.InvokeImportHexiteExchangeEntryDesc(eventContext, args),
                Reducer.ImportIdentityRole args => Reducers.InvokeImportIdentityRole(eventContext, args),
                Reducer.ImportInteriorCollapseTriggerState args => Reducers.InvokeImportInteriorCollapseTriggerState(eventContext, args),
                Reducer.ImportInteriorInstanceDesc args => Reducers.InvokeImportInteriorInstanceDesc(eventContext, args),
                Reducer.ImportInteriorNetworkDesc args => Reducers.InvokeImportInteriorNetworkDesc(eventContext, args),
                Reducer.ImportInteriorPortalConnectionsDesc args => Reducers.InvokeImportInteriorPortalConnectionsDesc(eventContext, args),
                Reducer.ImportInteriorShapeDesc args => Reducers.InvokeImportInteriorShapeDesc(eventContext, args),
                Reducer.ImportInteriorSpawnDesc args => Reducers.InvokeImportInteriorSpawnDesc(eventContext, args),
                Reducer.ImportInventoryState args => Reducers.InvokeImportInventoryState(eventContext, args),
                Reducer.ImportItemConversionRecipeDesc args => Reducers.InvokeImportItemConversionRecipeDesc(eventContext, args),
                Reducer.ImportItemDesc args => Reducers.InvokeImportItemDesc(eventContext, args),
                Reducer.ImportItemListDesc args => Reducers.InvokeImportItemListDesc(eventContext, args),
                Reducer.ImportKnowledgeAchievementState args => Reducers.InvokeImportKnowledgeAchievementState(eventContext, args),
                Reducer.ImportKnowledgeBattleActionState args => Reducers.InvokeImportKnowledgeBattleActionState(eventContext, args),
                Reducer.ImportKnowledgeBuildingState args => Reducers.InvokeImportKnowledgeBuildingState(eventContext, args),
                Reducer.ImportKnowledgeCargoState args => Reducers.InvokeImportKnowledgeCargoState(eventContext, args),
                Reducer.ImportKnowledgeConstructionState args => Reducers.InvokeImportKnowledgeConstructionState(eventContext, args),
                Reducer.ImportKnowledgeCraftState args => Reducers.InvokeImportKnowledgeCraftState(eventContext, args),
                Reducer.ImportKnowledgeDeployableState args => Reducers.InvokeImportKnowledgeDeployableState(eventContext, args),
                Reducer.ImportKnowledgeEnemyState args => Reducers.InvokeImportKnowledgeEnemyState(eventContext, args),
                Reducer.ImportKnowledgeExtractState args => Reducers.InvokeImportKnowledgeExtractState(eventContext, args),
                Reducer.ImportKnowledgeItemState args => Reducers.InvokeImportKnowledgeItemState(eventContext, args),
                Reducer.ImportKnowledgeLoreState args => Reducers.InvokeImportKnowledgeLoreState(eventContext, args),
                Reducer.ImportKnowledgeNpcState args => Reducers.InvokeImportKnowledgeNpcState(eventContext, args),
                Reducer.ImportKnowledgePavingState args => Reducers.InvokeImportKnowledgePavingState(eventContext, args),
                Reducer.ImportKnowledgeResourcePlacementState args => Reducers.InvokeImportKnowledgeResourcePlacementState(eventContext, args),
                Reducer.ImportKnowledgeResourceState args => Reducers.InvokeImportKnowledgeResourceState(eventContext, args),
                Reducer.ImportKnowledgeRuinsState args => Reducers.InvokeImportKnowledgeRuinsState(eventContext, args),
                Reducer.ImportKnowledgeScrollDesc args => Reducers.InvokeImportKnowledgeScrollDesc(eventContext, args),
                Reducer.ImportKnowledgeScrollTypeDesc args => Reducers.InvokeImportKnowledgeScrollTypeDesc(eventContext, args),
                Reducer.ImportKnowledgeSecondaryState args => Reducers.InvokeImportKnowledgeSecondaryState(eventContext, args),
                Reducer.ImportKnowledgeStatModifierDesc args => Reducers.InvokeImportKnowledgeStatModifierDesc(eventContext, args),
                Reducer.ImportKnowledgeVaultState args => Reducers.InvokeImportKnowledgeVaultState(eventContext, args),
                Reducer.ImportLocationState args => Reducers.InvokeImportLocationState(eventContext, args),
                Reducer.ImportLootChestDesc args => Reducers.InvokeImportLootChestDesc(eventContext, args),
                Reducer.ImportLootChestState args => Reducers.InvokeImportLootChestState(eventContext, args),
                Reducer.ImportLootRarityDesc args => Reducers.InvokeImportLootRarityDesc(eventContext, args),
                Reducer.ImportLootTableDesc args => Reducers.InvokeImportLootTableDesc(eventContext, args),
                Reducer.ImportMobileEntityState args => Reducers.InvokeImportMobileEntityState(eventContext, args),
                Reducer.ImportMountingState args => Reducers.InvokeImportMountingState(eventContext, args),
                Reducer.ImportNpcDesc args => Reducers.InvokeImportNpcDesc(eventContext, args),
                Reducer.ImportNpcState args => Reducers.InvokeImportNpcState(eventContext, args),
                Reducer.ImportOnboardingRewardDesc args => Reducers.InvokeImportOnboardingRewardDesc(eventContext, args),
                Reducer.ImportOnboardingState args => Reducers.InvokeImportOnboardingState(eventContext, args),
                Reducer.ImportParametersDesc args => Reducers.InvokeImportParametersDesc(eventContext, args),
                Reducer.ImportPathfindingDesc args => Reducers.InvokeImportPathfindingDesc(eventContext, args),
                Reducer.ImportPavedTileState args => Reducers.InvokeImportPavedTileState(eventContext, args),
                Reducer.ImportPavingTileDesc args => Reducers.InvokeImportPavingTileDesc(eventContext, args),
                Reducer.ImportPlayerActionDesc args => Reducers.InvokeImportPlayerActionDesc(eventContext, args),
                Reducer.ImportPlayerActionState args => Reducers.InvokeImportPlayerActionState(eventContext, args),
                Reducer.ImportPlayerPrefsState args => Reducers.InvokeImportPlayerPrefsState(eventContext, args),
                Reducer.ImportPlayerState args => Reducers.InvokeImportPlayerState(eventContext, args),
                Reducer.ImportPlayerVoteState args => Reducers.InvokeImportPlayerVoteState(eventContext, args),
                Reducer.ImportPortalState args => Reducers.InvokeImportPortalState(eventContext, args),
                Reducer.ImportPrivateParametersDesc args => Reducers.InvokeImportPrivateParametersDesc(eventContext, args),
                Reducer.ImportProgressiveActionState args => Reducers.InvokeImportProgressiveActionState(eventContext, args),
                Reducer.ImportProjectSiteState args => Reducers.InvokeImportProjectSiteState(eventContext, args),
                Reducer.ImportRegionConnectionInfo args => Reducers.InvokeImportRegionConnectionInfo(eventContext, args),
                Reducer.ImportRegionSignInParameters args => Reducers.InvokeImportRegionSignInParameters(eventContext, args),
                Reducer.ImportRentState args => Reducers.InvokeImportRentState(eventContext, args),
                Reducer.ImportResourceClumpDesc args => Reducers.InvokeImportResourceClumpDesc(eventContext, args),
                Reducer.ImportResourceCount args => Reducers.InvokeImportResourceCount(eventContext, args),
                Reducer.ImportResourceDesc args => Reducers.InvokeImportResourceDesc(eventContext, args),
                Reducer.ImportResourceGrowthRecipeDesc args => Reducers.InvokeImportResourceGrowthRecipeDesc(eventContext, args),
                Reducer.ImportResourcePlacementRecipeDesc args => Reducers.InvokeImportResourcePlacementRecipeDesc(eventContext, args),
                Reducer.ImportResourceState args => Reducers.InvokeImportResourceState(eventContext, args),
                Reducer.ImportSatiationState args => Reducers.InvokeImportSatiationState(eventContext, args),
                Reducer.ImportSecondaryKnowledgeDesc args => Reducers.InvokeImportSecondaryKnowledgeDesc(eventContext, args),
                Reducer.ImportServerIdentity args => Reducers.InvokeImportServerIdentity(eventContext, args),
                Reducer.ImportSignedInPlayerState args => Reducers.InvokeImportSignedInPlayerState(eventContext, args),
                Reducer.ImportSkillDesc args => Reducers.InvokeImportSkillDesc(eventContext, args),
                Reducer.ImportStaminaState args => Reducers.InvokeImportStaminaState(eventContext, args),
                Reducer.ImportTargetState args => Reducers.InvokeImportTargetState(eventContext, args),
                Reducer.ImportTargetableState args => Reducers.InvokeImportTargetableState(eventContext, args),
                Reducer.ImportTargetingMatrixDesc args => Reducers.InvokeImportTargetingMatrixDesc(eventContext, args),
                Reducer.ImportTeleportItemDesc args => Reducers.InvokeImportTeleportItemDesc(eventContext, args),
                Reducer.ImportTerraformRecipeDesc args => Reducers.InvokeImportTerraformRecipeDesc(eventContext, args),
                Reducer.ImportTerrainChunkState args => Reducers.InvokeImportTerrainChunkState(eventContext, args),
                Reducer.ImportToolDesc args => Reducers.InvokeImportToolDesc(eventContext, args),
                Reducer.ImportToolTypeDesc args => Reducers.InvokeImportToolTypeDesc(eventContext, args),
                Reducer.ImportTradeOrderState args => Reducers.InvokeImportTradeOrderState(eventContext, args),
                Reducer.ImportTradeSessionState args => Reducers.InvokeImportTradeSessionState(eventContext, args),
                Reducer.ImportTravelerTaskDesc args => Reducers.InvokeImportTravelerTaskDesc(eventContext, args),
                Reducer.ImportTravelerTradeOrderDesc args => Reducers.InvokeImportTravelerTradeOrderDesc(eventContext, args),
                Reducer.ImportUserModerationState args => Reducers.InvokeImportUserModerationState(eventContext, args),
                Reducer.ImportUserState args => Reducers.InvokeImportUserState(eventContext, args),
                Reducer.ImportVaultState args => Reducers.InvokeImportVaultState(eventContext, args),
                Reducer.ImportWallDesc args => Reducers.InvokeImportWallDesc(eventContext, args),
                Reducer.ImportWeaponDesc args => Reducers.InvokeImportWeaponDesc(eventContext, args),
                Reducer.ImportWeaponTypeDesc args => Reducers.InvokeImportWeaponTypeDesc(eventContext, args),
                Reducer.ImportWorldRegionNameState args => Reducers.InvokeImportWorldRegionNameState(eventContext, args),
                Reducer.ImportWorldRegionState args => Reducers.InvokeImportWorldRegionState(eventContext, args),
                Reducer.LoadConfig args => Reducers.InvokeLoadConfig(eventContext, args),
                Reducer.LogEmpireLeaderboard args => Reducers.InvokeLogEmpireLeaderboard(eventContext, args),
                Reducer.LogPlayerWith args => Reducers.InvokeLogPlayerWith(eventContext, args),
                Reducer.OnInterModuleMessageProcessed args => Reducers.InvokeOnInterModuleMessageProcessed(eventContext, args),
                Reducer.PlayerClaimDailyShards args => Reducers.InvokePlayerClaimDailyShards(eventContext, args),
                Reducer.PlayerCreate args => Reducers.InvokePlayerCreate(eventContext, args),
                Reducer.PlayerNotificationEventReducer args => Reducers.InvokePlayerNotificationEventReducer(eventContext, args),
                Reducer.PlayerSetName args => Reducers.InvokePlayerSetName(eventContext, args),
                Reducer.PlayerVoteAnswer args => Reducers.InvokePlayerVoteAnswer(eventContext, args),
                Reducer.PlayerVoteConclude args => Reducers.InvokePlayerVoteConclude(eventContext, args),
                Reducer.ProcessInterModuleMessage args => Reducers.InvokeProcessInterModuleMessage(eventContext, args),
                Reducer.SetRoleForIdentity args => Reducers.InvokeSetRoleForIdentity(eventContext, args),
                Reducer.SignIn args => Reducers.InvokeSignIn(eventContext, args),
                Reducer.StageAchievementDesc args => Reducers.InvokeStageAchievementDesc(eventContext, args),
                Reducer.StageAlertDesc args => Reducers.InvokeStageAlertDesc(eventContext, args),
                Reducer.StageBiomeDesc args => Reducers.InvokeStageBiomeDesc(eventContext, args),
                Reducer.StageBuffDesc args => Reducers.InvokeStageBuffDesc(eventContext, args),
                Reducer.StageBuffTypeDesc args => Reducers.InvokeStageBuffTypeDesc(eventContext, args),
                Reducer.StageBuildingClaimDesc args => Reducers.InvokeStageBuildingClaimDesc(eventContext, args),
                Reducer.StageBuildingDesc args => Reducers.InvokeStageBuildingDesc(eventContext, args),
                Reducer.StageBuildingPortalDesc args => Reducers.InvokeStageBuildingPortalDesc(eventContext, args),
                Reducer.StageBuildingRepairsDesc args => Reducers.InvokeStageBuildingRepairsDesc(eventContext, args),
                Reducer.StageBuildingSpawnDesc args => Reducers.InvokeStageBuildingSpawnDesc(eventContext, args),
                Reducer.StageBuildingTypeDesc args => Reducers.InvokeStageBuildingTypeDesc(eventContext, args),
                Reducer.StageCargoDesc args => Reducers.InvokeStageCargoDesc(eventContext, args),
                Reducer.StageCharacterStatDesc args => Reducers.InvokeStageCharacterStatDesc(eventContext, args),
                Reducer.StageChestRarityDesc args => Reducers.InvokeStageChestRarityDesc(eventContext, args),
                Reducer.StageClaimTechDesc args => Reducers.InvokeStageClaimTechDesc(eventContext, args),
                Reducer.StageClaimTileCost args => Reducers.InvokeStageClaimTileCost(eventContext, args),
                Reducer.StageClimbRequirementDesc args => Reducers.InvokeStageClimbRequirementDesc(eventContext, args),
                Reducer.StageClothingDesc args => Reducers.InvokeStageClothingDesc(eventContext, args),
                Reducer.StageCollectibleDesc args => Reducers.InvokeStageCollectibleDesc(eventContext, args),
                Reducer.StageCombatActionDesc args => Reducers.InvokeStageCombatActionDesc(eventContext, args),
                Reducer.StageConstructionRecipeDesc args => Reducers.InvokeStageConstructionRecipeDesc(eventContext, args),
                Reducer.StageCraftingRecipeDesc args => Reducers.InvokeStageCraftingRecipeDesc(eventContext, args),
                Reducer.StageDeconstructionRecipeDesc args => Reducers.InvokeStageDeconstructionRecipeDesc(eventContext, args),
                Reducer.StageDeployableDesc args => Reducers.InvokeStageDeployableDesc(eventContext, args),
                Reducer.StageDistantVisibleEntityDesc args => Reducers.InvokeStageDistantVisibleEntityDesc(eventContext, args),
                Reducer.StageElevatorDesc args => Reducers.InvokeStageElevatorDesc(eventContext, args),
                Reducer.StageEmoteDesc args => Reducers.InvokeStageEmoteDesc(eventContext, args),
                Reducer.StageEmpireColorsDesc args => Reducers.InvokeStageEmpireColorsDesc(eventContext, args),
                Reducer.StageEmpireIconDesc args => Reducers.InvokeStageEmpireIconDesc(eventContext, args),
                Reducer.StageEmpireNotificationDesc args => Reducers.InvokeStageEmpireNotificationDesc(eventContext, args),
                Reducer.StageEmpireRankDesc args => Reducers.InvokeStageEmpireRankDesc(eventContext, args),
                Reducer.StageEmpireSuppliesDesc args => Reducers.InvokeStageEmpireSuppliesDesc(eventContext, args),
                Reducer.StageEmpireTerritoryDesc args => Reducers.InvokeStageEmpireTerritoryDesc(eventContext, args),
                Reducer.StageEnemyAiParamsDesc args => Reducers.InvokeStageEnemyAiParamsDesc(eventContext, args),
                Reducer.StageEnemyDesc args => Reducers.InvokeStageEnemyDesc(eventContext, args),
                Reducer.StageEnvironmentDebuffDesc args => Reducers.InvokeStageEnvironmentDebuffDesc(eventContext, args),
                Reducer.StageEquipmentDesc args => Reducers.InvokeStageEquipmentDesc(eventContext, args),
                Reducer.StageExtractionRecipeDesc args => Reducers.InvokeStageExtractionRecipeDesc(eventContext, args),
                Reducer.StageFoodDesc args => Reducers.InvokeStageFoodDesc(eventContext, args),
                Reducer.StageGateDesc args => Reducers.InvokeStageGateDesc(eventContext, args),
                Reducer.StageHexiteExchangeEntryDesc args => Reducers.InvokeStageHexiteExchangeEntryDesc(eventContext, args),
                Reducer.StageInteriorEnvironmentDesc args => Reducers.InvokeStageInteriorEnvironmentDesc(eventContext, args),
                Reducer.StageInteriorInstanceDesc args => Reducers.InvokeStageInteriorInstanceDesc(eventContext, args),
                Reducer.StageInteriorNetworkDesc args => Reducers.InvokeStageInteriorNetworkDesc(eventContext, args),
                Reducer.StageInteriorPortalConnectionsDesc args => Reducers.InvokeStageInteriorPortalConnectionsDesc(eventContext, args),
                Reducer.StageInteriorShapeDesc args => Reducers.InvokeStageInteriorShapeDesc(eventContext, args),
                Reducer.StageInteriorSpawnDesc args => Reducers.InvokeStageInteriorSpawnDesc(eventContext, args),
                Reducer.StageItemConversionRecipeDesc args => Reducers.InvokeStageItemConversionRecipeDesc(eventContext, args),
                Reducer.StageItemDesc args => Reducers.InvokeStageItemDesc(eventContext, args),
                Reducer.StageItemListDesc args => Reducers.InvokeStageItemListDesc(eventContext, args),
                Reducer.StageKnowledgeScrollDesc args => Reducers.InvokeStageKnowledgeScrollDesc(eventContext, args),
                Reducer.StageKnowledgeScrollTypeDesc args => Reducers.InvokeStageKnowledgeScrollTypeDesc(eventContext, args),
                Reducer.StageKnowledgeStatModifierDesc args => Reducers.InvokeStageKnowledgeStatModifierDesc(eventContext, args),
                Reducer.StageLootChestDesc args => Reducers.InvokeStageLootChestDesc(eventContext, args),
                Reducer.StageLootRarityDesc args => Reducers.InvokeStageLootRarityDesc(eventContext, args),
                Reducer.StageLootTableDesc args => Reducers.InvokeStageLootTableDesc(eventContext, args),
                Reducer.StageNpcDesc args => Reducers.InvokeStageNpcDesc(eventContext, args),
                Reducer.StageOnboardingRewardDesc args => Reducers.InvokeStageOnboardingRewardDesc(eventContext, args),
                Reducer.StageParametersDesc args => Reducers.InvokeStageParametersDesc(eventContext, args),
                Reducer.StagePathfindingDesc args => Reducers.InvokeStagePathfindingDesc(eventContext, args),
                Reducer.StagePavingTileDesc args => Reducers.InvokeStagePavingTileDesc(eventContext, args),
                Reducer.StagePillarShapingDesc args => Reducers.InvokeStagePillarShapingDesc(eventContext, args),
                Reducer.StagePlayerActionDesc args => Reducers.InvokeStagePlayerActionDesc(eventContext, args),
                Reducer.StagePlayerHousingDesc args => Reducers.InvokeStagePlayerHousingDesc(eventContext, args),
                Reducer.StagePrivateParametersDesc args => Reducers.InvokeStagePrivateParametersDesc(eventContext, args),
                Reducer.StageResourceClumpDesc args => Reducers.InvokeStageResourceClumpDesc(eventContext, args),
                Reducer.StageResourceDesc args => Reducers.InvokeStageResourceDesc(eventContext, args),
                Reducer.StageResourceGrowthRecipeDesc args => Reducers.InvokeStageResourceGrowthRecipeDesc(eventContext, args),
                Reducer.StageResourcePlacementRecipeDesc args => Reducers.InvokeStageResourcePlacementRecipeDesc(eventContext, args),
                Reducer.StageSecondaryKnowledgeDesc args => Reducers.InvokeStageSecondaryKnowledgeDesc(eventContext, args),
                Reducer.StageSkillDesc args => Reducers.InvokeStageSkillDesc(eventContext, args),
                Reducer.StageTargetingMatrixDesc args => Reducers.InvokeStageTargetingMatrixDesc(eventContext, args),
                Reducer.StageTeleportItemDesc args => Reducers.InvokeStageTeleportItemDesc(eventContext, args),
                Reducer.StageTerraformRecipeDesc args => Reducers.InvokeStageTerraformRecipeDesc(eventContext, args),
                Reducer.StageToolDesc args => Reducers.InvokeStageToolDesc(eventContext, args),
                Reducer.StageToolTypeDesc args => Reducers.InvokeStageToolTypeDesc(eventContext, args),
                Reducer.StageTravelerTaskDesc args => Reducers.InvokeStageTravelerTaskDesc(eventContext, args),
                Reducer.StageTravelerTradeOrderDesc args => Reducers.InvokeStageTravelerTradeOrderDesc(eventContext, args),
                Reducer.StageWallDesc args => Reducers.InvokeStageWallDesc(eventContext, args),
                Reducer.StageWeaponDesc args => Reducers.InvokeStageWeaponDesc(eventContext, args),
                Reducer.StageWeaponTypeDesc args => Reducers.InvokeStageWeaponTypeDesc(eventContext, args),
                Reducer.UpdateRoleForPlayer args => Reducers.InvokeUpdateRoleForPlayer(eventContext, args),
                Reducer.UpdateScheduledTimersFromStaticData args => Reducers.InvokeUpdateScheduledTimersFromStaticData(eventContext, args),
                Reducer.UserModerationClearAll args => Reducers.InvokeUserModerationClearAll(eventContext, args),
                Reducer.UserModerationCreate args => Reducers.InvokeUserModerationCreate(eventContext, args),
                Reducer.UserModerationDelete args => Reducers.InvokeUserModerationDelete(eventContext, args),
                Reducer.UserModerationListAll args => Reducers.InvokeUserModerationListAll(eventContext, args),
                _ => throw new ArgumentOutOfRangeException("Reducer", $"Unknown reducer {reducer}")
            };
        }

        public SubscriptionBuilder SubscriptionBuilder() => new(this);
        public event Action<ReducerEventContext, Exception> OnUnhandledReducerError
        {
            add => Reducers.InternalOnUnhandledReducerError += value;
            remove => Reducers.InternalOnUnhandledReducerError -= value;
        }
    }
}
