// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.


#nullable enable

using System;
using SpacetimeDB;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace BitCraftGlobal.Types
{
    public sealed partial class RemoteReducers : RemoteBase
    {
        public delegate void CheatEmpireSiegeAddSuppliesHandler(ReducerEventContext ctx, ulong siegeNodeEntityId, int supplies);
        public event CheatEmpireSiegeAddSuppliesHandler? OnCheatEmpireSiegeAddSupplies;

        public void CheatEmpireSiegeAddSupplies(ulong siegeNodeEntityId, int supplies)
        {
            conn.InternalCallReducer(new Reducer.CheatEmpireSiegeAddSupplies(siegeNodeEntityId, supplies), this.SetCallReducerFlags.CheatEmpireSiegeAddSuppliesFlags);
        }

        public bool InvokeCheatEmpireSiegeAddSupplies(ReducerEventContext ctx, Reducer.CheatEmpireSiegeAddSupplies args)
        {
            if (OnCheatEmpireSiegeAddSupplies == null)
            {
                if (InternalOnUnhandledReducerError != null)
                {
                    switch (ctx.Event.Status)
                    {
                        case Status.Failed(var reason): InternalOnUnhandledReducerError(ctx, new Exception(reason)); break;
                        case Status.OutOfEnergy(var _): InternalOnUnhandledReducerError(ctx, new Exception("out of energy")); break;
                    }
                }
                return false;
            }
            OnCheatEmpireSiegeAddSupplies(
                ctx,
                args.SiegeNodeEntityId,
                args.Supplies
            );
            return true;
        }
    }

    public abstract partial class Reducer
    {
        [SpacetimeDB.Type]
        [DataContract]
        public sealed partial class CheatEmpireSiegeAddSupplies : Reducer, IReducerArgs
        {
            [DataMember(Name = "siege_node_entity_id")]
            public ulong SiegeNodeEntityId;
            [DataMember(Name = "supplies")]
            public int Supplies;

            public CheatEmpireSiegeAddSupplies(
                ulong SiegeNodeEntityId,
                int Supplies
            )
            {
                this.SiegeNodeEntityId = SiegeNodeEntityId;
                this.Supplies = Supplies;
            }

            public CheatEmpireSiegeAddSupplies()
            {
            }

            string IReducerArgs.ReducerName => "cheat_empire_siege_add_supplies";
        }
    }

    public sealed partial class SetReducerFlags
    {
        internal CallReducerFlags CheatEmpireSiegeAddSuppliesFlags;
        public void CheatEmpireSiegeAddSupplies(CallReducerFlags flags) => CheatEmpireSiegeAddSuppliesFlags = flags;
    }
}
