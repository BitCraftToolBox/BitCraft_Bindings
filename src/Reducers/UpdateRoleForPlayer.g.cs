// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.


#nullable enable

using System;
using SpacetimeDB;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace BitCraftGlobal.Types
{
    public sealed partial class RemoteReducers : RemoteBase
    {
        public delegate void UpdateRoleForPlayerHandler(ReducerEventContext ctx, ulong playerEntityId, Role role);
        public event UpdateRoleForPlayerHandler? OnUpdateRoleForPlayer;

        public void UpdateRoleForPlayer(ulong playerEntityId, Role role)
        {
            conn.InternalCallReducer(new Reducer.UpdateRoleForPlayer(playerEntityId, role), this.SetCallReducerFlags.UpdateRoleForPlayerFlags);
        }

        public bool InvokeUpdateRoleForPlayer(ReducerEventContext ctx, Reducer.UpdateRoleForPlayer args)
        {
            if (OnUpdateRoleForPlayer == null)
            {
                if (InternalOnUnhandledReducerError != null)
                {
                    switch(ctx.Event.Status)
                    {
                        case Status.Failed(var reason): InternalOnUnhandledReducerError(ctx, new Exception(reason)); break;
                        case Status.OutOfEnergy(var _): InternalOnUnhandledReducerError(ctx, new Exception("out of energy")); break;
                    }
                }
                return false;
            }
            OnUpdateRoleForPlayer(
                ctx,
                args.PlayerEntityId,
                args.Role
            );
            return true;
        }
    }

    public abstract partial class Reducer
    {
        [SpacetimeDB.Type]
        [DataContract]
        public sealed partial class UpdateRoleForPlayer : Reducer, IReducerArgs
        {
            [DataMember(Name = "player_entity_id")]
            public ulong PlayerEntityId;
            [DataMember(Name = "role")]
            public Role Role;

            public UpdateRoleForPlayer(
                ulong PlayerEntityId,
                Role Role
            )
            {
                this.PlayerEntityId = PlayerEntityId;
                this.Role = Role;
            }

            public UpdateRoleForPlayer()
            {
            }

            string IReducerArgs.ReducerName => "update_role_for_player";
        }
    }

    public sealed partial class SetReducerFlags
    {
        internal CallReducerFlags UpdateRoleForPlayerFlags;
        public void UpdateRoleForPlayer(CallReducerFlags flags) => UpdateRoleForPlayerFlags = flags;
    }
}
